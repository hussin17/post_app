{
  "version": 3,
  "sources": ["../../laravel-vue-i18n/dist/utils/get-plural-index.js", "../../laravel-vue-i18n/dist/pluralization.js", "../../laravel-vue-i18n/dist/utils/avoid-exceptions.js", "../../laravel-vue-i18n/dist/utils/has-php-translations.js", "../../laravel-vue-i18n/dist/index.js"],
  "sourcesContent": ["/**\n * Get the index to use for pluralization.\n *\n * The plural rules are derived from code of the Zend Framework (2010-09-25), which\n * is subject to the new BSD license (https://framework.zend.com/license)\n * Copyright (c) 2005-2010 - Zend Technologies USA Inc. (http://www.zend.com)\n */\nexport function getPluralIndex(lang, number) {\n    switch (lang.replace('_', '-')) {\n        case 'af':\n        case 'af-ZA':\n        case 'bn':\n        case 'bn-BD':\n        case 'bn-IN':\n        case 'bg':\n        case 'bg-BG':\n        case 'ca':\n        case 'ca-AD':\n        case 'ca-ES':\n        case 'ca-FR':\n        case 'ca-IT':\n        case 'da':\n        case 'da-DK':\n        case 'de':\n        case 'de-AT':\n        case 'de-BE':\n        case 'de-CH':\n        case 'de-DE':\n        case 'de-LI':\n        case 'de-LU':\n        case 'el':\n        case 'el-CY':\n        case 'el-GR':\n        case 'en':\n        case 'en-AG':\n        case 'en-AU':\n        case 'en-BW':\n        case 'en-CA':\n        case 'en-DK':\n        case 'en-GB':\n        case 'en-HK':\n        case 'en-IE':\n        case 'en-IN':\n        case 'en-NG':\n        case 'en-NZ':\n        case 'en-PH':\n        case 'en-SG':\n        case 'en-US':\n        case 'en-ZA':\n        case 'en-ZM':\n        case 'en-ZW':\n        case 'eo':\n        case 'eo-US':\n        case 'es':\n        case 'es-AR':\n        case 'es-BO':\n        case 'es-CL':\n        case 'es-CO':\n        case 'es-CR':\n        case 'es-CU':\n        case 'es-DO':\n        case 'es-EC':\n        case 'es-ES':\n        case 'es-GT':\n        case 'es-HN':\n        case 'es-MX':\n        case 'es-NI':\n        case 'es-PA':\n        case 'es-PE':\n        case 'es-PR':\n        case 'es-PY':\n        case 'es-SV':\n        case 'es-US':\n        case 'es-UY':\n        case 'es-VE':\n        case 'et':\n        case 'et-EE':\n        case 'eu':\n        case 'eu-ES':\n        case 'eu-FR':\n        case 'fa':\n        case 'fa-IR':\n        case 'fi':\n        case 'fi-FI':\n        case 'fo':\n        case 'fo-FO':\n        case 'fur':\n        case 'fur-IT':\n        case 'fy':\n        case 'fy-DE':\n        case 'fy-NL':\n        case 'gl':\n        case 'gl-ES':\n        case 'gu':\n        case 'gu-IN':\n        case 'ha':\n        case 'ha-NG':\n        case 'he':\n        case 'he-IL':\n        case 'hu':\n        case 'hu-HU':\n        case 'is':\n        case 'is-IS':\n        case 'it':\n        case 'it-CH':\n        case 'it-IT':\n        case 'ku':\n        case 'ku-TR':\n        case 'lb':\n        case 'lb-LU':\n        case 'ml':\n        case 'ml-IN':\n        case 'mn':\n        case 'mn-MN':\n        case 'mr':\n        case 'mr-IN':\n        case 'nah':\n        case 'nb':\n        case 'nb-NO':\n        case 'ne':\n        case 'ne-NP':\n        case 'nl':\n        case 'nl-AW':\n        case 'nl-BE':\n        case 'nl-NL':\n        case 'nn':\n        case 'nn-NO':\n        case 'no':\n        case 'om':\n        case 'om-ET':\n        case 'om-KE':\n        case 'or':\n        case 'or-IN':\n        case 'pa':\n        case 'pa-IN':\n        case 'pa-PK':\n        case 'pap':\n        case 'pap-AN':\n        case 'pap-AW':\n        case 'pap-CW':\n        case 'ps':\n        case 'ps-AF':\n        case 'pt':\n        case 'pt-BR':\n        case 'pt-PT':\n        case 'so':\n        case 'so-DJ':\n        case 'so-ET':\n        case 'so-KE':\n        case 'so-SO':\n        case 'sq':\n        case 'sq-AL':\n        case 'sq-MK':\n        case 'sv':\n        case 'sv-FI':\n        case 'sv-SE':\n        case 'sw':\n        case 'sw-KE':\n        case 'sw-TZ':\n        case 'ta':\n        case 'ta-IN':\n        case 'ta-LK':\n        case 'te':\n        case 'te-IN':\n        case 'tk':\n        case 'tk-TM':\n        case 'ur':\n        case 'ur-IN':\n        case 'ur-PK':\n        case 'zu':\n        case 'zu-ZA':\n            return number === 1 ? 0 : 1;\n        case 'am':\n        case 'am-ET':\n        case 'bh':\n        case 'fil':\n        case 'fil-PH':\n        case 'fr':\n        case 'fr-BE':\n        case 'fr-CA':\n        case 'fr-CH':\n        case 'fr-FR':\n        case 'fr-LU':\n        case 'gun':\n        case 'hi':\n        case 'hi-IN':\n        case 'hy':\n        case 'hy-AM':\n        case 'ln':\n        case 'ln-CD':\n        case 'mg':\n        case 'mg-MG':\n        case 'nso':\n        case 'nso-ZA':\n        case 'ti':\n        case 'ti-ER':\n        case 'ti-ET':\n        case 'wa':\n        case 'wa-BE':\n        case 'xbr':\n            return number === 0 || number === 1 ? 0 : 1;\n        case 'be':\n        case 'be-BY':\n        case 'bs':\n        case 'bs-BA':\n        case 'hr':\n        case 'hr-HR':\n        case 'ru':\n        case 'ru-RU':\n        case 'ru-UA':\n        case 'sr':\n        case 'sr-ME':\n        case 'sr-RS':\n        case 'uk':\n        case 'uk-UA':\n            return number % 10 == 1 && number % 100 != 11\n                ? 0\n                : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 10 || number % 100 >= 20)\n                    ? 1\n                    : 2;\n        case 'cs':\n        case 'cs-CZ':\n        case 'sk':\n        case 'sk-SK':\n            return number == 1 ? 0 : number >= 2 && number <= 4 ? 1 : 2;\n        case 'ga':\n        case 'ga-IE':\n            return number == 1 ? 0 : number == 2 ? 1 : 2;\n        case 'lt':\n        case 'lt-LT':\n            return number % 10 == 1 && number % 100 != 11\n                ? 0\n                : number % 10 >= 2 && (number % 100 < 10 || number % 100 >= 20)\n                    ? 1\n                    : 2;\n        case 'sl':\n        case 'sl-SI':\n            return number % 100 == 1 ? 0 : number % 100 == 2 ? 1 : number % 100 == 3 || number % 100 == 4 ? 2 : 3;\n        case 'mk':\n        case 'mk-MK':\n            return number % 10 == 1 ? 0 : 1;\n        case 'mt':\n        case 'mt-MT':\n            return number == 1\n                ? 0\n                : number == 0 || (number % 100 > 1 && number % 100 < 11)\n                    ? 1\n                    : number % 100 > 10 && number % 100 < 20\n                        ? 2\n                        : 3;\n        case 'lv':\n        case 'lv-LV':\n            return number == 0 ? 0 : number % 10 == 1 && number % 100 != 11 ? 1 : 2;\n        case 'pl':\n        case 'pl-PL':\n            return number == 1 ? 0 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 12 || number % 100 > 14) ? 1 : 2;\n        case 'cy':\n        case 'cy-GB':\n            return number == 1 ? 0 : number == 2 ? 1 : number == 8 || number == 11 ? 2 : 3;\n        case 'ro':\n        case 'ro-RO':\n            return number == 1 ? 0 : number == 0 || (number % 100 > 0 && number % 100 < 20) ? 1 : 2;\n        case 'ar':\n        case 'ar-AE':\n        case 'ar-BH':\n        case 'ar-DZ':\n        case 'ar-EG':\n        case 'ar-IN':\n        case 'ar-IQ':\n        case 'ar-JO':\n        case 'ar-KW':\n        case 'ar-LB':\n        case 'ar-LY':\n        case 'ar-MA':\n        case 'ar-OM':\n        case 'ar-QA':\n        case 'ar-SA':\n        case 'ar-SD':\n        case 'ar-SS':\n        case 'ar-SY':\n        case 'ar-TN':\n        case 'ar-YE':\n            return number == 0\n                ? 0\n                : number == 1\n                    ? 1\n                    : number == 2\n                        ? 2\n                        : number % 100 >= 3 && number % 100 <= 10\n                            ? 3\n                            : number % 100 >= 11 && number % 100 <= 99\n                                ? 4\n                                : 5;\n        default:\n            return 0;\n    }\n}\n", "import { getPluralIndex } from './utils/get-plural-index';\n/**\n * Select a proper translation string based on the given number.\n */\nexport function choose(message, number, lang) {\n    let segments = message.split('|');\n    const extracted = extract(segments, number);\n    if (extracted !== null) {\n        return extracted.trim();\n    }\n    segments = stripConditions(segments);\n    const pluralIndex = getPluralIndex(lang, number);\n    if (segments.length === 1 || !segments[pluralIndex]) {\n        return segments[0];\n    }\n    return segments[pluralIndex];\n}\n/**\n * Extract a translation string using inline conditions.\n */\nfunction extract(segments, number) {\n    for (const part of segments) {\n        let line = extractFromString(part, number);\n        if (line !== null) {\n            return line;\n        }\n    }\n    return null;\n}\n/**\n * Get the translation string if the condition matches.\n */\nfunction extractFromString(part, number) {\n    const matches = part.match(/^[\\{\\[]([^\\[\\]\\{\\}]*)[\\}\\]](.*)/s) || [];\n    if (matches.length !== 3) {\n        return null;\n    }\n    const condition = matches[1];\n    const value = matches[2];\n    if (condition.includes(',')) {\n        let [from, to] = condition.split(',');\n        if (to === '*' && number >= parseFloat(from)) {\n            return value;\n        }\n        else if (from === '*' && number <= parseFloat(to)) {\n            return value;\n        }\n        else if (number >= parseFloat(from) && number <= parseFloat(to)) {\n            return value;\n        }\n    }\n    return parseFloat(condition) === number ? value : null;\n}\n/**\n * Strip the inline conditions from each segment, just leaving the text.\n */\nfunction stripConditions(segments) {\n    return segments.map((part) => part.replace(/^[\\{\\[]([^\\[\\]\\{\\}]*)[\\}\\]]/, ''));\n}\n", "export const avoidException = (callback, param, defaults = {}) => {\n    try {\n        return callback(param);\n    }\n    catch {\n        return defaults;\n    }\n};\nexport const avoidExceptionOnPromise = async (promise, defaults = {}) => {\n    try {\n        return (await promise).default || defaults;\n    }\n    catch (e) {\n        return defaults;\n    }\n};\n", "export function hasPhpTranslations(isServer) {\n    return isServer || checkProcessEnv() || checkImportMeta();\n}\nfunction checkProcessEnv() {\n    return typeof process !== 'undefined' && process.env?.LARAVEL_VUE_I18N_HAS_PHP ? true : false;\n}\nfunction checkImportMeta() {\n    /** @ts-ignore */\n    return typeof import.meta.env !== 'undefined' &&\n        /** @ts-ignore */\n        import.meta.env.VITE_LARAVEL_VUE_I18N_HAS_PHP\n        ? true\n        : false;\n}\n", "import { reactive, computed } from 'vue';\nimport { choose } from './pluralization';\nimport { avoidExceptionOnPromise, avoidException } from './utils/avoid-exceptions';\nimport { hasPhpTranslations } from './utils/has-php-translations';\nconst isServer = typeof window === 'undefined';\n/**\n * The default options, for the plugin.\n */\nconst DEFAULT_OPTIONS = {\n    lang: !isServer && document.documentElement.lang ? document.documentElement.lang.replace('-', '_') : null,\n    fallbackLang: 'en',\n    resolve: (lang) => new Promise((resolve) => resolve({ default: {} }))\n};\n/**\n * Stores the current options.\n */\nlet options = DEFAULT_OPTIONS;\n/**\n * Stores the loaded languages.\n */\nlet loaded = [];\n/**\n * The active messages to use.\n */\nconst activeMessages = reactive({});\n/**\n * Checks if the language is loaded.\n */\nexport function isLoaded(lang) {\n    lang ?? (lang = getActiveLanguage());\n    return loaded.some((row) => row.lang.replace(/[-_]/g, '-') === lang.replace(/[-_]/g, '-'));\n}\n/**\n * Loads the language async.\n */\nfunction loadLanguage(lang, dashLangTry = false) {\n    const loadedLang = loaded.find((row) => row.lang === lang);\n    if (loadedLang) {\n        setLanguage(loadedLang);\n        return;\n    }\n    const { default: messages } = resolveLang(options.resolve, lang);\n    applyLanguage(lang, messages, dashLangTry, loadLanguage);\n}\n/**\n * Loads the language file.\n */\nexport function loadLanguageAsync(lang, dashLangTry = false) {\n    const loadedLang = loaded.find((row) => row.lang === lang);\n    if (loadedLang) {\n        return Promise.resolve(setLanguage(loadedLang));\n    }\n    return resolveLangAsync(options.resolve, lang).then(({ default: messages }) => applyLanguage(lang, messages, dashLangTry, loadLanguageAsync));\n}\n/**\n * Applies the language data and saves it to the loaded storage.\n */\nfunction applyLanguage(lang, messages, dashLangTry = false, callable) {\n    if (Object.keys(messages).length < 1) {\n        if (/[-_]/g.test(lang) && !dashLangTry) {\n            return callable(lang.replace(/[-_]/g, (char) => (char === '-' ? '_' : '-')), true);\n        }\n        if (lang !== options.fallbackLang) {\n            return callable(options.fallbackLang);\n        }\n    }\n    const data = { lang, messages };\n    loaded.push(data);\n    return setLanguage(data);\n}\n/**\n * Get the translation for the given key.\n */\nexport function trans(key, replacements = {}) {\n    return wTrans(key, replacements).value;\n}\n/**\n * Get the translation for the given key and watch for any changes.\n */\nexport function wTrans(key, replacements = {}) {\n    if (!activeMessages[key]) {\n        activeMessages[key] = key;\n    }\n    return computed(() => makeReplacements(activeMessages[key], replacements));\n}\n/**\n * Translates the given message based on a count.\n */\nexport function transChoice(key, number, replacements = {}) {\n    return wTransChoice(key, number, replacements).value;\n}\n/**\n * Translates the given message based on a count and watch for changes.\n */\nexport function wTransChoice(key, number, replacements = {}) {\n    const message = wTrans(key, replacements);\n    replacements.count = number.toString();\n    return computed(() => makeReplacements(choose(message.value, number, options.lang), replacements));\n}\n/**\n * Returns the current active language.\n */\nexport function getActiveLanguage() {\n    return options.lang || options.fallbackLang;\n}\n/**\n * Sets the language messages to the activeMessages.\n */\nfunction setLanguage({ lang, messages }) {\n    if (!isServer) {\n        // When setting the HTML lang attribute, hyphen must be use instead of underscore.\n        document.documentElement.setAttribute('lang', lang.replace('_', '-'));\n    }\n    options.lang = lang;\n    for (const [key, value] of Object.entries(messages)) {\n        activeMessages[key] = value;\n    }\n    for (const [key] of Object.entries(activeMessages)) {\n        if (!messages[key]) {\n            activeMessages[key] = null;\n        }\n    }\n    return lang;\n}\n/**\n * It resolves the language file or data, from direct data, syncrone.\n */\nfunction resolveLang(callable, lang, data = {}) {\n    if (!Object.keys(data).length) {\n        data = avoidException(callable, lang);\n    }\n    if (hasPhpTranslations(isServer)) {\n        return {\n            default: {\n                ...data,\n                ...avoidException(callable, `php_${lang}`)\n            }\n        };\n    }\n    return { default: data };\n}\n/**\n * It resolves the language file or data, from direct data, require or Promise.\n */\nasync function resolveLangAsync(callable, lang) {\n    let data = avoidException(callable, lang);\n    if (!(data instanceof Promise)) {\n        return resolveLang(callable, lang, data);\n    }\n    if (hasPhpTranslations(isServer)) {\n        const phpLang = await avoidExceptionOnPromise(callable(`php_${lang}`));\n        const jsonLang = await avoidExceptionOnPromise(data);\n        return new Promise((resolve) => resolve({\n            default: {\n                ...phpLang,\n                ...jsonLang\n            }\n        }));\n    }\n    return new Promise(async (resolve) => resolve({\n        default: await avoidExceptionOnPromise(data)\n    }));\n}\n/**\n * Make the place-holder replacements on a line.\n */\nfunction makeReplacements(message, replacements) {\n    const capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n    Object.entries(replacements || []).forEach(([key, value]) => {\n        value = value.toString();\n        message = message\n            .replace(`:${key}`, value)\n            .replace(`:${key.toUpperCase()}`, value.toUpperCase())\n            .replace(`:${capitalize(key)}`, capitalize(value));\n    });\n    return message;\n}\n/**\n * Resets all the data stored in memory.\n */\nexport const reset = () => {\n    loaded = [];\n    options = DEFAULT_OPTIONS;\n    for (const [key] of Object.entries(activeMessages)) {\n        activeMessages[key] = null;\n    }\n};\n/**\n * Alias to `transChoice` to mimic the same function name from Laravel Framework.\n */\nexport const trans_choice = transChoice;\n/**\n * The Vue Plugin. to be used on your Vue app like this: `app.use(i18nVue)`\n */\nexport const i18nVue = {\n    install: (app, currentOptions = {}) => {\n        options = { ...options, ...currentOptions };\n        app.config.globalProperties.$t = (key, replacements) => trans(key, replacements);\n        app.config.globalProperties.$tChoice = (key, number, replacements) => transChoice(key, number, replacements);\n        if (isServer) {\n            loadLanguage(options.lang || options.fallbackLang);\n        }\n        else {\n            loadLanguageAsync(options.lang || options.fallbackLang);\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;AAOO,SAAS,eAAe,MAAM,QAAQ;AACzC,UAAQ,KAAK,QAAQ,KAAK,GAAG;AAAA,SACpB;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,SACA;AAAA,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",
  "names": ["isServer"]
}
