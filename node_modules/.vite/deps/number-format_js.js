import {
  __commonJS
} from "./chunk-OROXOI2D.js";

// node_modules/number-format.js/lib/format.min.js
var require_format_min = __commonJS({
  "node_modules/number-format.js/lib/format.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).format = t();
    }(exports, function() {
      "use strict";
      const e = /[0-9\-+#]/, t = /[^\d\-+#]/g;
      function n(t2) {
        return t2.search(e);
      }
      return (e2, i, r = {}) => {
        if (!e2 || isNaN(Number(i)))
          return i;
        const s = function(e3 = "#.##") {
          const i2 = {}, r2 = e3.length, s2 = n(e3);
          i2.prefix = s2 > 0 ? e3.substring(0, s2) : "";
          const a2 = n(e3.split("").reverse().join("")), o = r2 - a2, u = e3.substring(o, o + 1), l = o + ("." === u || "," === u ? 1 : 0);
          i2.suffix = a2 > 0 ? e3.substring(l, r2) : "", i2.mask = e3.substring(s2, l), i2.maskHasNegativeSign = "-" === i2.mask.charAt(0), i2.maskHasPositiveSign = "+" === i2.mask.charAt(0);
          let g = i2.mask.match(t);
          return i2.decimal = g && g[g.length - 1] || ".", i2.separator = g && g[1] && g[0] || ",", g = i2.mask.split(i2.decimal), i2.integer = g[0], i2.fraction = g[1], i2;
        }(e2), a = function(e3, t2, n2) {
          let i2 = false;
          const r2 = { value: e3 };
          e3 < 0 && (i2 = true, r2.value = -r2.value), r2.sign = i2 ? "-" : "", r2.value = Number(r2.value).toFixed(t2.fraction && t2.fraction.length), r2.value = Number(r2.value).toString();
          const s2 = t2.fraction && t2.fraction.lastIndexOf("0");
          let [a2 = "0", o = ""] = r2.value.split(".");
          return (!o || o && o.length <= s2) && (o = s2 < 0 ? "" : Number("0." + o).toFixed(s2 + 1).replace("0.", "")), r2.integer = a2, r2.fraction = o, function(e4, t3) {
            e4.result = "";
            const n3 = t3.integer.split(t3.separator), i3 = n3.join(""), r3 = i3 && i3.indexOf("0");
            if (r3 > -1)
              for (; e4.integer.length < i3.length - r3; )
                e4.integer = "0" + e4.integer;
            else
              0 === Number(e4.integer) && (e4.integer = "");
            const s3 = n3[1] && n3[n3.length - 1].length;
            if (s3) {
              const n4 = e4.integer.length, i4 = n4 % s3;
              for (let r4 = 0; r4 < n4; r4++)
                e4.result += e4.integer.charAt(r4), !((r4 - i4 + 1) % s3) && r4 < n4 - s3 && (e4.result += t3.separator);
            } else
              e4.result = e4.integer;
            e4.result += t3.fraction && e4.fraction ? t3.decimal + e4.fraction : "";
          }(r2, t2), "0" !== r2.result && "" !== r2.result || (i2 = false, r2.sign = ""), !i2 && t2.maskHasPositiveSign ? r2.sign = "+" : i2 && t2.maskHasPositiveSign ? r2.sign = "-" : i2 && (r2.sign = n2 && n2.enforceMaskSign && !t2.maskHasNegativeSign ? "" : "-"), r2;
        }(i, s, r);
        return s.prefix + a.sign + a.result + s.suffix;
      };
    });
  }
});

// dep:number-format_js
var number_format_js_default = require_format_min();
export {
  number_format_js_default as default
};
/*! Javascript-number-formatter v2.0.9 */
//# sourceMappingURL=number-format_js.js.map
