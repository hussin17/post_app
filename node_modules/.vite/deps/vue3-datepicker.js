import {
  add,
  addBusinessDays,
  addDays,
  addHours,
  addISOWeekYears,
  addMilliseconds,
  addMinutes,
  addMonths,
  addQuarters,
  addSeconds,
  addWeeks,
  addYears,
  areIntervalsOverlapping,
  clamp,
  closestIndexTo,
  closestTo,
  compareAsc,
  compareDesc,
  daysToWeeks,
  differenceInBusinessDays,
  differenceInCalendarDays,
  differenceInCalendarISOWeekYears,
  differenceInCalendarISOWeeks,
  differenceInCalendarMonths,
  differenceInCalendarQuarters,
  differenceInCalendarWeeks,
  differenceInCalendarYears,
  differenceInDays,
  differenceInHours,
  differenceInISOWeekYears,
  differenceInMilliseconds,
  differenceInMinutes,
  differenceInMonths,
  differenceInQuarters,
  differenceInSeconds,
  differenceInWeeks,
  differenceInYears,
  eachDayOfInterval,
  eachHourOfInterval,
  eachMinuteOfInterval,
  eachMonthOfInterval,
  eachQuarterOfInterval,
  eachWeekOfInterval,
  eachWeekendOfInterval,
  eachWeekendOfMonth,
  eachWeekendOfYear,
  eachYearOfInterval,
  endOfDay,
  endOfDecade,
  endOfHour,
  endOfISOWeek,
  endOfISOWeekYear,
  endOfMinute,
  endOfMonth,
  endOfQuarter,
  endOfSecond,
  endOfWeek,
  endOfYear,
  format,
  formatDistance,
  formatDistanceStrict,
  formatDuration,
  formatISO,
  formatISO9075,
  formatISODuration,
  formatRFC3339,
  formatRFC7231,
  formatRelative,
  fromUnixTime,
  getDate,
  getDay,
  getDayOfYear,
  getDaysInMonth,
  getDaysInYear,
  getDecade,
  getHours,
  getISODay,
  getISOWeek,
  getISOWeekYear,
  getISOWeeksInYear,
  getMilliseconds,
  getMinutes,
  getMonth,
  getOverlappingDaysInIntervals,
  getQuarter,
  getSeconds,
  getTime,
  getUnixTime,
  getWeek,
  getWeekOfMonth,
  getWeekYear,
  getWeeksInMonth,
  getYear,
  hoursToMilliseconds,
  hoursToMinutes,
  hoursToSeconds,
  intervalToDuration,
  intlFormat,
  intlFormatDistance,
  isAfter,
  isBefore,
  isDate,
  isEqual,
  isExists,
  isFirstDayOfMonth,
  isFriday,
  isLastDayOfMonth,
  isLeapYear,
  isMatch,
  isMonday,
  isSameDay,
  isSameHour,
  isSameISOWeek,
  isSameISOWeekYear,
  isSameMinute,
  isSameMonth,
  isSameQuarter,
  isSameSecond,
  isSameWeek,
  isSameYear,
  isSaturday,
  isSunday,
  isThursday,
  isTuesday,
  isValid,
  isWednesday,
  isWeekend,
  isWithinInterval,
  lastDayOfDecade,
  lastDayOfISOWeek,
  lastDayOfISOWeekYear,
  lastDayOfMonth,
  lastDayOfQuarter,
  lastDayOfWeek,
  lastDayOfYear,
  lightFormat,
  max,
  milliseconds,
  millisecondsToHours,
  millisecondsToMinutes,
  millisecondsToSeconds,
  min,
  minutesToHours,
  minutesToMilliseconds,
  minutesToSeconds,
  monthsToQuarters,
  monthsToYears,
  nextDay,
  nextFriday,
  nextMonday,
  nextSaturday,
  nextSunday,
  nextThursday,
  nextTuesday,
  nextWednesday,
  parse,
  parseISO,
  parseJSON,
  previousDay,
  previousFriday,
  previousMonday,
  previousSaturday,
  previousSunday,
  previousThursday,
  previousTuesday,
  previousWednesday,
  quartersToMonths,
  quartersToYears,
  roundToNearestMinutes,
  secondsToHours,
  secondsToMilliseconds,
  secondsToMinutes,
  set,
  setDate,
  setDay,
  setDayOfYear,
  setHours,
  setISODay,
  setISOWeek,
  setISOWeekYear,
  setMilliseconds,
  setMinutes,
  setMonth,
  setQuarter,
  setSeconds,
  setWeek,
  setWeekYear,
  setYear,
  startOfDay,
  startOfDecade,
  startOfHour,
  startOfISOWeek,
  startOfISOWeekYear,
  startOfMinute,
  startOfMonth,
  startOfQuarter,
  startOfSecond,
  startOfWeek,
  startOfWeekYear,
  startOfYear,
  sub,
  subBusinessDays,
  subDays,
  subHours,
  subISOWeekYears,
  subMilliseconds,
  subMinutes,
  subMonths,
  subQuarters,
  subSeconds,
  subWeeks,
  subYears,
  toDate,
  weeksToDays,
  yearsToMonths,
  yearsToQuarters
} from "./chunk-3XGAISUZ.js";
import "./chunk-BYTJ6LW2.js";
import {
  Fragment,
  computed,
  createBlock,
  createCommentVNode,
  createTextVNode,
  createVNode,
  defineComponent,
  mergeProps,
  nextTick,
  openBlock,
  popScopeId,
  pushScopeId,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  vModelText,
  vShow,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withModifiers,
  withScopeId
} from "./chunk-VBJ4LH5I.js";
import "./chunk-OROXOI2D.js";

// node_modules/date-fns/esm/fp/_lib/convertToFP/index.js
function convertToFP(fn, arity) {
  var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  if (a.length >= arity) {
    return fn.apply(null, a.slice(0, arity).reverse());
  }
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return convertToFP(fn, arity, a.concat(args));
  };
}

// node_modules/date-fns/esm/fp/add/index.js
var add_default = convertToFP(add, 2);

// node_modules/date-fns/esm/fp/addBusinessDays/index.js
var addBusinessDays_default = convertToFP(addBusinessDays, 2);

// node_modules/date-fns/esm/fp/addDays/index.js
var addDays_default = convertToFP(addDays, 2);

// node_modules/date-fns/esm/fp/addHours/index.js
var addHours_default = convertToFP(addHours, 2);

// node_modules/date-fns/esm/fp/addISOWeekYears/index.js
var addISOWeekYears_default = convertToFP(addISOWeekYears, 2);

// node_modules/date-fns/esm/fp/addMilliseconds/index.js
var addMilliseconds_default = convertToFP(addMilliseconds, 2);

// node_modules/date-fns/esm/fp/addMinutes/index.js
var addMinutes_default = convertToFP(addMinutes, 2);

// node_modules/date-fns/esm/fp/addMonths/index.js
var addMonths_default = convertToFP(addMonths, 2);

// node_modules/date-fns/esm/fp/addQuarters/index.js
var addQuarters_default = convertToFP(addQuarters, 2);

// node_modules/date-fns/esm/fp/addSeconds/index.js
var addSeconds_default = convertToFP(addSeconds, 2);

// node_modules/date-fns/esm/fp/addWeeks/index.js
var addWeeks_default = convertToFP(addWeeks, 2);

// node_modules/date-fns/esm/fp/addYears/index.js
var addYears_default = convertToFP(addYears, 2);

// node_modules/date-fns/esm/fp/areIntervalsOverlapping/index.js
var areIntervalsOverlapping_default = convertToFP(areIntervalsOverlapping, 2);

// node_modules/date-fns/esm/fp/areIntervalsOverlappingWithOptions/index.js
var areIntervalsOverlappingWithOptions_default = convertToFP(areIntervalsOverlapping, 3);

// node_modules/date-fns/esm/fp/clamp/index.js
var clamp_default = convertToFP(clamp, 2);

// node_modules/date-fns/esm/fp/closestIndexTo/index.js
var closestIndexTo_default = convertToFP(closestIndexTo, 2);

// node_modules/date-fns/esm/fp/closestTo/index.js
var closestTo_default = convertToFP(closestTo, 2);

// node_modules/date-fns/esm/fp/compareAsc/index.js
var compareAsc_default = convertToFP(compareAsc, 2);

// node_modules/date-fns/esm/fp/compareDesc/index.js
var compareDesc_default = convertToFP(compareDesc, 2);

// node_modules/date-fns/esm/fp/daysToWeeks/index.js
var daysToWeeks_default = convertToFP(daysToWeeks, 1);

// node_modules/date-fns/esm/fp/differenceInBusinessDays/index.js
var differenceInBusinessDays_default = convertToFP(differenceInBusinessDays, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarDays/index.js
var differenceInCalendarDays_default = convertToFP(differenceInCalendarDays, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarISOWeekYears/index.js
var differenceInCalendarISOWeekYears_default = convertToFP(differenceInCalendarISOWeekYears, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarISOWeeks/index.js
var differenceInCalendarISOWeeks_default = convertToFP(differenceInCalendarISOWeeks, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarMonths/index.js
var differenceInCalendarMonths_default = convertToFP(differenceInCalendarMonths, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarQuarters/index.js
var differenceInCalendarQuarters_default = convertToFP(differenceInCalendarQuarters, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarWeeks/index.js
var differenceInCalendarWeeks_default = convertToFP(differenceInCalendarWeeks, 2);

// node_modules/date-fns/esm/fp/differenceInCalendarWeeksWithOptions/index.js
var differenceInCalendarWeeksWithOptions_default = convertToFP(differenceInCalendarWeeks, 3);

// node_modules/date-fns/esm/fp/differenceInCalendarYears/index.js
var differenceInCalendarYears_default = convertToFP(differenceInCalendarYears, 2);

// node_modules/date-fns/esm/fp/differenceInDays/index.js
var differenceInDays_default = convertToFP(differenceInDays, 2);

// node_modules/date-fns/esm/fp/differenceInHours/index.js
var differenceInHours_default = convertToFP(differenceInHours, 2);

// node_modules/date-fns/esm/fp/differenceInHoursWithOptions/index.js
var differenceInHoursWithOptions_default = convertToFP(differenceInHours, 3);

// node_modules/date-fns/esm/fp/differenceInISOWeekYears/index.js
var differenceInISOWeekYears_default = convertToFP(differenceInISOWeekYears, 2);

// node_modules/date-fns/esm/fp/differenceInMilliseconds/index.js
var differenceInMilliseconds_default = convertToFP(differenceInMilliseconds, 2);

// node_modules/date-fns/esm/fp/differenceInMinutes/index.js
var differenceInMinutes_default = convertToFP(differenceInMinutes, 2);

// node_modules/date-fns/esm/fp/differenceInMinutesWithOptions/index.js
var differenceInMinutesWithOptions_default = convertToFP(differenceInMinutes, 3);

// node_modules/date-fns/esm/fp/differenceInMonths/index.js
var differenceInMonths_default = convertToFP(differenceInMonths, 2);

// node_modules/date-fns/esm/fp/differenceInQuarters/index.js
var differenceInQuarters_default = convertToFP(differenceInQuarters, 2);

// node_modules/date-fns/esm/fp/differenceInQuartersWithOptions/index.js
var differenceInQuartersWithOptions_default = convertToFP(differenceInQuarters, 3);

// node_modules/date-fns/esm/fp/differenceInSeconds/index.js
var differenceInSeconds_default = convertToFP(differenceInSeconds, 2);

// node_modules/date-fns/esm/fp/differenceInSecondsWithOptions/index.js
var differenceInSecondsWithOptions_default = convertToFP(differenceInSeconds, 3);

// node_modules/date-fns/esm/fp/differenceInWeeks/index.js
var differenceInWeeks_default = convertToFP(differenceInWeeks, 2);

// node_modules/date-fns/esm/fp/differenceInWeeksWithOptions/index.js
var differenceInWeeksWithOptions_default = convertToFP(differenceInWeeks, 3);

// node_modules/date-fns/esm/fp/differenceInYears/index.js
var differenceInYears_default = convertToFP(differenceInYears, 2);

// node_modules/date-fns/esm/fp/eachDayOfInterval/index.js
var eachDayOfInterval_default = convertToFP(eachDayOfInterval, 1);

// node_modules/date-fns/esm/fp/eachDayOfIntervalWithOptions/index.js
var eachDayOfIntervalWithOptions_default = convertToFP(eachDayOfInterval, 2);

// node_modules/date-fns/esm/fp/eachHourOfInterval/index.js
var eachHourOfInterval_default = convertToFP(eachHourOfInterval, 1);

// node_modules/date-fns/esm/fp/eachHourOfIntervalWithOptions/index.js
var eachHourOfIntervalWithOptions_default = convertToFP(eachHourOfInterval, 2);

// node_modules/date-fns/esm/fp/eachMinuteOfInterval/index.js
var eachMinuteOfInterval_default = convertToFP(eachMinuteOfInterval, 1);

// node_modules/date-fns/esm/fp/eachMinuteOfIntervalWithOptions/index.js
var eachMinuteOfIntervalWithOptions_default = convertToFP(eachMinuteOfInterval, 2);

// node_modules/date-fns/esm/fp/eachMonthOfInterval/index.js
var eachMonthOfInterval_default = convertToFP(eachMonthOfInterval, 1);

// node_modules/date-fns/esm/fp/eachQuarterOfInterval/index.js
var eachQuarterOfInterval_default = convertToFP(eachQuarterOfInterval, 1);

// node_modules/date-fns/esm/fp/eachWeekOfInterval/index.js
var eachWeekOfInterval_default = convertToFP(eachWeekOfInterval, 1);

// node_modules/date-fns/esm/fp/eachWeekOfIntervalWithOptions/index.js
var eachWeekOfIntervalWithOptions_default = convertToFP(eachWeekOfInterval, 2);

// node_modules/date-fns/esm/fp/eachWeekendOfInterval/index.js
var eachWeekendOfInterval_default = convertToFP(eachWeekendOfInterval, 1);

// node_modules/date-fns/esm/fp/eachWeekendOfMonth/index.js
var eachWeekendOfMonth_default = convertToFP(eachWeekendOfMonth, 1);

// node_modules/date-fns/esm/fp/eachWeekendOfYear/index.js
var eachWeekendOfYear_default = convertToFP(eachWeekendOfYear, 1);

// node_modules/date-fns/esm/fp/eachYearOfInterval/index.js
var eachYearOfInterval_default = convertToFP(eachYearOfInterval, 1);

// node_modules/date-fns/esm/fp/endOfDay/index.js
var endOfDay_default = convertToFP(endOfDay, 1);

// node_modules/date-fns/esm/fp/endOfDecade/index.js
var endOfDecade_default = convertToFP(endOfDecade, 1);

// node_modules/date-fns/esm/fp/endOfDecadeWithOptions/index.js
var endOfDecadeWithOptions_default = convertToFP(endOfDecade, 2);

// node_modules/date-fns/esm/fp/endOfHour/index.js
var endOfHour_default = convertToFP(endOfHour, 1);

// node_modules/date-fns/esm/fp/endOfISOWeek/index.js
var endOfISOWeek_default = convertToFP(endOfISOWeek, 1);

// node_modules/date-fns/esm/fp/endOfISOWeekYear/index.js
var endOfISOWeekYear_default = convertToFP(endOfISOWeekYear, 1);

// node_modules/date-fns/esm/fp/endOfMinute/index.js
var endOfMinute_default = convertToFP(endOfMinute, 1);

// node_modules/date-fns/esm/fp/endOfMonth/index.js
var endOfMonth_default = convertToFP(endOfMonth, 1);

// node_modules/date-fns/esm/fp/endOfQuarter/index.js
var endOfQuarter_default = convertToFP(endOfQuarter, 1);

// node_modules/date-fns/esm/fp/endOfSecond/index.js
var endOfSecond_default = convertToFP(endOfSecond, 1);

// node_modules/date-fns/esm/fp/endOfWeek/index.js
var endOfWeek_default = convertToFP(endOfWeek, 1);

// node_modules/date-fns/esm/fp/endOfWeekWithOptions/index.js
var endOfWeekWithOptions_default = convertToFP(endOfWeek, 2);

// node_modules/date-fns/esm/fp/endOfYear/index.js
var endOfYear_default = convertToFP(endOfYear, 1);

// node_modules/date-fns/esm/fp/format/index.js
var format_default = convertToFP(format, 2);

// node_modules/date-fns/esm/fp/formatDistance/index.js
var formatDistance_default = convertToFP(formatDistance, 2);

// node_modules/date-fns/esm/fp/formatDistanceStrict/index.js
var formatDistanceStrict_default = convertToFP(formatDistanceStrict, 2);

// node_modules/date-fns/esm/fp/formatDistanceStrictWithOptions/index.js
var formatDistanceStrictWithOptions_default = convertToFP(formatDistanceStrict, 3);

// node_modules/date-fns/esm/fp/formatDistanceWithOptions/index.js
var formatDistanceWithOptions_default = convertToFP(formatDistance, 3);

// node_modules/date-fns/esm/fp/formatDuration/index.js
var formatDuration_default = convertToFP(formatDuration, 1);

// node_modules/date-fns/esm/fp/formatDurationWithOptions/index.js
var formatDurationWithOptions_default = convertToFP(formatDuration, 2);

// node_modules/date-fns/esm/fp/formatISO/index.js
var formatISO_default = convertToFP(formatISO, 1);

// node_modules/date-fns/esm/fp/formatISO9075/index.js
var formatISO9075_default = convertToFP(formatISO9075, 1);

// node_modules/date-fns/esm/fp/formatISO9075WithOptions/index.js
var formatISO9075WithOptions_default = convertToFP(formatISO9075, 2);

// node_modules/date-fns/esm/fp/formatISODuration/index.js
var formatISODuration_default = convertToFP(formatISODuration, 1);

// node_modules/date-fns/esm/fp/formatISOWithOptions/index.js
var formatISOWithOptions_default = convertToFP(formatISO, 2);

// node_modules/date-fns/esm/fp/formatRFC3339/index.js
var formatRFC3339_default = convertToFP(formatRFC3339, 1);

// node_modules/date-fns/esm/fp/formatRFC3339WithOptions/index.js
var formatRFC3339WithOptions_default = convertToFP(formatRFC3339, 2);

// node_modules/date-fns/esm/fp/formatRFC7231/index.js
var formatRFC7231_default = convertToFP(formatRFC7231, 1);

// node_modules/date-fns/esm/fp/formatRelative/index.js
var formatRelative_default = convertToFP(formatRelative, 2);

// node_modules/date-fns/esm/fp/formatRelativeWithOptions/index.js
var formatRelativeWithOptions_default = convertToFP(formatRelative, 3);

// node_modules/date-fns/esm/fp/formatWithOptions/index.js
var formatWithOptions_default = convertToFP(format, 3);

// node_modules/date-fns/esm/fp/fromUnixTime/index.js
var fromUnixTime_default = convertToFP(fromUnixTime, 1);

// node_modules/date-fns/esm/fp/getDate/index.js
var getDate_default = convertToFP(getDate, 1);

// node_modules/date-fns/esm/fp/getDay/index.js
var getDay_default = convertToFP(getDay, 1);

// node_modules/date-fns/esm/fp/getDayOfYear/index.js
var getDayOfYear_default = convertToFP(getDayOfYear, 1);

// node_modules/date-fns/esm/fp/getDaysInMonth/index.js
var getDaysInMonth_default = convertToFP(getDaysInMonth, 1);

// node_modules/date-fns/esm/fp/getDaysInYear/index.js
var getDaysInYear_default = convertToFP(getDaysInYear, 1);

// node_modules/date-fns/esm/fp/getDecade/index.js
var getDecade_default = convertToFP(getDecade, 1);

// node_modules/date-fns/esm/fp/getHours/index.js
var getHours_default = convertToFP(getHours, 1);

// node_modules/date-fns/esm/fp/getISODay/index.js
var getISODay_default = convertToFP(getISODay, 1);

// node_modules/date-fns/esm/fp/getISOWeek/index.js
var getISOWeek_default = convertToFP(getISOWeek, 1);

// node_modules/date-fns/esm/fp/getISOWeekYear/index.js
var getISOWeekYear_default = convertToFP(getISOWeekYear, 1);

// node_modules/date-fns/esm/fp/getISOWeeksInYear/index.js
var getISOWeeksInYear_default = convertToFP(getISOWeeksInYear, 1);

// node_modules/date-fns/esm/fp/getMilliseconds/index.js
var getMilliseconds_default = convertToFP(getMilliseconds, 1);

// node_modules/date-fns/esm/fp/getMinutes/index.js
var getMinutes_default = convertToFP(getMinutes, 1);

// node_modules/date-fns/esm/fp/getMonth/index.js
var getMonth_default = convertToFP(getMonth, 1);

// node_modules/date-fns/esm/fp/getOverlappingDaysInIntervals/index.js
var getOverlappingDaysInIntervals_default = convertToFP(getOverlappingDaysInIntervals, 2);

// node_modules/date-fns/esm/fp/getQuarter/index.js
var getQuarter_default = convertToFP(getQuarter, 1);

// node_modules/date-fns/esm/fp/getSeconds/index.js
var getSeconds_default = convertToFP(getSeconds, 1);

// node_modules/date-fns/esm/fp/getTime/index.js
var getTime_default = convertToFP(getTime, 1);

// node_modules/date-fns/esm/fp/getUnixTime/index.js
var getUnixTime_default = convertToFP(getUnixTime, 1);

// node_modules/date-fns/esm/fp/getWeek/index.js
var getWeek_default = convertToFP(getWeek, 1);

// node_modules/date-fns/esm/fp/getWeekOfMonth/index.js
var getWeekOfMonth_default = convertToFP(getWeekOfMonth, 1);

// node_modules/date-fns/esm/fp/getWeekOfMonthWithOptions/index.js
var getWeekOfMonthWithOptions_default = convertToFP(getWeekOfMonth, 2);

// node_modules/date-fns/esm/fp/getWeekWithOptions/index.js
var getWeekWithOptions_default = convertToFP(getWeek, 2);

// node_modules/date-fns/esm/fp/getWeekYear/index.js
var getWeekYear_default = convertToFP(getWeekYear, 1);

// node_modules/date-fns/esm/fp/getWeekYearWithOptions/index.js
var getWeekYearWithOptions_default = convertToFP(getWeekYear, 2);

// node_modules/date-fns/esm/fp/getWeeksInMonth/index.js
var getWeeksInMonth_default = convertToFP(getWeeksInMonth, 1);

// node_modules/date-fns/esm/fp/getWeeksInMonthWithOptions/index.js
var getWeeksInMonthWithOptions_default = convertToFP(getWeeksInMonth, 2);

// node_modules/date-fns/esm/fp/getYear/index.js
var getYear_default = convertToFP(getYear, 1);

// node_modules/date-fns/esm/fp/hoursToMilliseconds/index.js
var hoursToMilliseconds_default = convertToFP(hoursToMilliseconds, 1);

// node_modules/date-fns/esm/fp/hoursToMinutes/index.js
var hoursToMinutes_default = convertToFP(hoursToMinutes, 1);

// node_modules/date-fns/esm/fp/hoursToSeconds/index.js
var hoursToSeconds_default = convertToFP(hoursToSeconds, 1);

// node_modules/date-fns/esm/fp/intervalToDuration/index.js
var intervalToDuration_default = convertToFP(intervalToDuration, 1);

// node_modules/date-fns/esm/fp/intlFormat/index.js
var intlFormat_default = convertToFP(intlFormat, 3);

// node_modules/date-fns/esm/fp/intlFormatDistance/index.js
var intlFormatDistance_default = convertToFP(intlFormatDistance, 2);

// node_modules/date-fns/esm/fp/intlFormatDistanceWithOptions/index.js
var intlFormatDistanceWithOptions_default = convertToFP(intlFormatDistance, 3);

// node_modules/date-fns/esm/fp/isAfter/index.js
var isAfter_default = convertToFP(isAfter, 2);

// node_modules/date-fns/esm/fp/isBefore/index.js
var isBefore_default = convertToFP(isBefore, 2);

// node_modules/date-fns/esm/fp/isDate/index.js
var isDate_default = convertToFP(isDate, 1);

// node_modules/date-fns/esm/fp/isEqual/index.js
var isEqual_default = convertToFP(isEqual, 2);

// node_modules/date-fns/esm/fp/isExists/index.js
var isExists_default = convertToFP(isExists, 3);

// node_modules/date-fns/esm/fp/isFirstDayOfMonth/index.js
var isFirstDayOfMonth_default = convertToFP(isFirstDayOfMonth, 1);

// node_modules/date-fns/esm/fp/isFriday/index.js
var isFriday_default = convertToFP(isFriday, 1);

// node_modules/date-fns/esm/fp/isLastDayOfMonth/index.js
var isLastDayOfMonth_default = convertToFP(isLastDayOfMonth, 1);

// node_modules/date-fns/esm/fp/isLeapYear/index.js
var isLeapYear_default = convertToFP(isLeapYear, 1);

// node_modules/date-fns/esm/fp/isMatch/index.js
var isMatch_default = convertToFP(isMatch, 2);

// node_modules/date-fns/esm/fp/isMatchWithOptions/index.js
var isMatchWithOptions_default = convertToFP(isMatch, 3);

// node_modules/date-fns/esm/fp/isMonday/index.js
var isMonday_default = convertToFP(isMonday, 1);

// node_modules/date-fns/esm/fp/isSameDay/index.js
var isSameDay_default = convertToFP(isSameDay, 2);

// node_modules/date-fns/esm/fp/isSameHour/index.js
var isSameHour_default = convertToFP(isSameHour, 2);

// node_modules/date-fns/esm/fp/isSameISOWeek/index.js
var isSameISOWeek_default = convertToFP(isSameISOWeek, 2);

// node_modules/date-fns/esm/fp/isSameISOWeekYear/index.js
var isSameISOWeekYear_default = convertToFP(isSameISOWeekYear, 2);

// node_modules/date-fns/esm/fp/isSameMinute/index.js
var isSameMinute_default = convertToFP(isSameMinute, 2);

// node_modules/date-fns/esm/fp/isSameMonth/index.js
var isSameMonth_default = convertToFP(isSameMonth, 2);

// node_modules/date-fns/esm/fp/isSameQuarter/index.js
var isSameQuarter_default = convertToFP(isSameQuarter, 2);

// node_modules/date-fns/esm/fp/isSameSecond/index.js
var isSameSecond_default = convertToFP(isSameSecond, 2);

// node_modules/date-fns/esm/fp/isSameWeek/index.js
var isSameWeek_default = convertToFP(isSameWeek, 2);

// node_modules/date-fns/esm/fp/isSameWeekWithOptions/index.js
var isSameWeekWithOptions_default = convertToFP(isSameWeek, 3);

// node_modules/date-fns/esm/fp/isSameYear/index.js
var isSameYear_default = convertToFP(isSameYear, 2);

// node_modules/date-fns/esm/fp/isSaturday/index.js
var isSaturday_default = convertToFP(isSaturday, 1);

// node_modules/date-fns/esm/fp/isSunday/index.js
var isSunday_default = convertToFP(isSunday, 1);

// node_modules/date-fns/esm/fp/isThursday/index.js
var isThursday_default = convertToFP(isThursday, 1);

// node_modules/date-fns/esm/fp/isTuesday/index.js
var isTuesday_default = convertToFP(isTuesday, 1);

// node_modules/date-fns/esm/fp/isValid/index.js
var isValid_default = convertToFP(isValid, 1);

// node_modules/date-fns/esm/fp/isWednesday/index.js
var isWednesday_default = convertToFP(isWednesday, 1);

// node_modules/date-fns/esm/fp/isWeekend/index.js
var isWeekend_default = convertToFP(isWeekend, 1);

// node_modules/date-fns/esm/fp/isWithinInterval/index.js
var isWithinInterval_default = convertToFP(isWithinInterval, 2);

// node_modules/date-fns/esm/fp/lastDayOfDecade/index.js
var lastDayOfDecade_default = convertToFP(lastDayOfDecade, 1);

// node_modules/date-fns/esm/fp/lastDayOfISOWeek/index.js
var lastDayOfISOWeek_default = convertToFP(lastDayOfISOWeek, 1);

// node_modules/date-fns/esm/fp/lastDayOfISOWeekYear/index.js
var lastDayOfISOWeekYear_default = convertToFP(lastDayOfISOWeekYear, 1);

// node_modules/date-fns/esm/fp/lastDayOfMonth/index.js
var lastDayOfMonth_default = convertToFP(lastDayOfMonth, 1);

// node_modules/date-fns/esm/fp/lastDayOfQuarter/index.js
var lastDayOfQuarter_default = convertToFP(lastDayOfQuarter, 1);

// node_modules/date-fns/esm/fp/lastDayOfQuarterWithOptions/index.js
var lastDayOfQuarterWithOptions_default = convertToFP(lastDayOfQuarter, 2);

// node_modules/date-fns/esm/fp/lastDayOfWeek/index.js
var lastDayOfWeek_default = convertToFP(lastDayOfWeek, 1);

// node_modules/date-fns/esm/fp/lastDayOfWeekWithOptions/index.js
var lastDayOfWeekWithOptions_default = convertToFP(lastDayOfWeek, 2);

// node_modules/date-fns/esm/fp/lastDayOfYear/index.js
var lastDayOfYear_default = convertToFP(lastDayOfYear, 1);

// node_modules/date-fns/esm/fp/lightFormat/index.js
var lightFormat_default = convertToFP(lightFormat, 2);

// node_modules/date-fns/esm/fp/max/index.js
var max_default = convertToFP(max, 1);

// node_modules/date-fns/esm/fp/milliseconds/index.js
var milliseconds_default = convertToFP(milliseconds, 1);

// node_modules/date-fns/esm/fp/millisecondsToHours/index.js
var millisecondsToHours_default = convertToFP(millisecondsToHours, 1);

// node_modules/date-fns/esm/fp/millisecondsToMinutes/index.js
var millisecondsToMinutes_default = convertToFP(millisecondsToMinutes, 1);

// node_modules/date-fns/esm/fp/millisecondsToSeconds/index.js
var millisecondsToSeconds_default = convertToFP(millisecondsToSeconds, 1);

// node_modules/date-fns/esm/fp/min/index.js
var min_default = convertToFP(min, 1);

// node_modules/date-fns/esm/fp/minutesToHours/index.js
var minutesToHours_default = convertToFP(minutesToHours, 1);

// node_modules/date-fns/esm/fp/minutesToMilliseconds/index.js
var minutesToMilliseconds_default = convertToFP(minutesToMilliseconds, 1);

// node_modules/date-fns/esm/fp/minutesToSeconds/index.js
var minutesToSeconds_default = convertToFP(minutesToSeconds, 1);

// node_modules/date-fns/esm/fp/monthsToQuarters/index.js
var monthsToQuarters_default = convertToFP(monthsToQuarters, 1);

// node_modules/date-fns/esm/fp/monthsToYears/index.js
var monthsToYears_default = convertToFP(monthsToYears, 1);

// node_modules/date-fns/esm/fp/nextDay/index.js
var nextDay_default = convertToFP(nextDay, 2);

// node_modules/date-fns/esm/fp/nextFriday/index.js
var nextFriday_default = convertToFP(nextFriday, 1);

// node_modules/date-fns/esm/fp/nextMonday/index.js
var nextMonday_default = convertToFP(nextMonday, 1);

// node_modules/date-fns/esm/fp/nextSaturday/index.js
var nextSaturday_default = convertToFP(nextSaturday, 1);

// node_modules/date-fns/esm/fp/nextSunday/index.js
var nextSunday_default = convertToFP(nextSunday, 1);

// node_modules/date-fns/esm/fp/nextThursday/index.js
var nextThursday_default = convertToFP(nextThursday, 1);

// node_modules/date-fns/esm/fp/nextTuesday/index.js
var nextTuesday_default = convertToFP(nextTuesday, 1);

// node_modules/date-fns/esm/fp/nextWednesday/index.js
var nextWednesday_default = convertToFP(nextWednesday, 1);

// node_modules/date-fns/esm/fp/parse/index.js
var parse_default = convertToFP(parse, 3);

// node_modules/date-fns/esm/fp/parseISO/index.js
var parseISO_default = convertToFP(parseISO, 1);

// node_modules/date-fns/esm/fp/parseISOWithOptions/index.js
var parseISOWithOptions_default = convertToFP(parseISO, 2);

// node_modules/date-fns/esm/fp/parseJSON/index.js
var parseJSON_default = convertToFP(parseJSON, 1);

// node_modules/date-fns/esm/fp/parseWithOptions/index.js
var parseWithOptions_default = convertToFP(parse, 4);

// node_modules/date-fns/esm/fp/previousDay/index.js
var previousDay_default = convertToFP(previousDay, 2);

// node_modules/date-fns/esm/fp/previousFriday/index.js
var previousFriday_default = convertToFP(previousFriday, 1);

// node_modules/date-fns/esm/fp/previousMonday/index.js
var previousMonday_default = convertToFP(previousMonday, 1);

// node_modules/date-fns/esm/fp/previousSaturday/index.js
var previousSaturday_default = convertToFP(previousSaturday, 1);

// node_modules/date-fns/esm/fp/previousSunday/index.js
var previousSunday_default = convertToFP(previousSunday, 1);

// node_modules/date-fns/esm/fp/previousThursday/index.js
var previousThursday_default = convertToFP(previousThursday, 1);

// node_modules/date-fns/esm/fp/previousTuesday/index.js
var previousTuesday_default = convertToFP(previousTuesday, 1);

// node_modules/date-fns/esm/fp/previousWednesday/index.js
var previousWednesday_default = convertToFP(previousWednesday, 1);

// node_modules/date-fns/esm/fp/quartersToMonths/index.js
var quartersToMonths_default = convertToFP(quartersToMonths, 1);

// node_modules/date-fns/esm/fp/quartersToYears/index.js
var quartersToYears_default = convertToFP(quartersToYears, 1);

// node_modules/date-fns/esm/fp/roundToNearestMinutes/index.js
var roundToNearestMinutes_default = convertToFP(roundToNearestMinutes, 1);

// node_modules/date-fns/esm/fp/roundToNearestMinutesWithOptions/index.js
var roundToNearestMinutesWithOptions_default = convertToFP(roundToNearestMinutes, 2);

// node_modules/date-fns/esm/fp/secondsToHours/index.js
var secondsToHours_default = convertToFP(secondsToHours, 1);

// node_modules/date-fns/esm/fp/secondsToMilliseconds/index.js
var secondsToMilliseconds_default = convertToFP(secondsToMilliseconds, 1);

// node_modules/date-fns/esm/fp/secondsToMinutes/index.js
var secondsToMinutes_default = convertToFP(secondsToMinutes, 1);

// node_modules/date-fns/esm/fp/set/index.js
var set_default = convertToFP(set, 2);

// node_modules/date-fns/esm/fp/setDate/index.js
var setDate_default = convertToFP(setDate, 2);

// node_modules/date-fns/esm/fp/setDay/index.js
var setDay_default = convertToFP(setDay, 2);

// node_modules/date-fns/esm/fp/setDayOfYear/index.js
var setDayOfYear_default = convertToFP(setDayOfYear, 2);

// node_modules/date-fns/esm/fp/setDayWithOptions/index.js
var setDayWithOptions_default = convertToFP(setDay, 3);

// node_modules/date-fns/esm/fp/setHours/index.js
var setHours_default = convertToFP(setHours, 2);

// node_modules/date-fns/esm/fp/setISODay/index.js
var setISODay_default = convertToFP(setISODay, 2);

// node_modules/date-fns/esm/fp/setISOWeek/index.js
var setISOWeek_default = convertToFP(setISOWeek, 2);

// node_modules/date-fns/esm/fp/setISOWeekYear/index.js
var setISOWeekYear_default = convertToFP(setISOWeekYear, 2);

// node_modules/date-fns/esm/fp/setMilliseconds/index.js
var setMilliseconds_default = convertToFP(setMilliseconds, 2);

// node_modules/date-fns/esm/fp/setMinutes/index.js
var setMinutes_default = convertToFP(setMinutes, 2);

// node_modules/date-fns/esm/fp/setMonth/index.js
var setMonth_default = convertToFP(setMonth, 2);

// node_modules/date-fns/esm/fp/setQuarter/index.js
var setQuarter_default = convertToFP(setQuarter, 2);

// node_modules/date-fns/esm/fp/setSeconds/index.js
var setSeconds_default = convertToFP(setSeconds, 2);

// node_modules/date-fns/esm/fp/setWeek/index.js
var setWeek_default = convertToFP(setWeek, 2);

// node_modules/date-fns/esm/fp/setWeekWithOptions/index.js
var setWeekWithOptions_default = convertToFP(setWeek, 3);

// node_modules/date-fns/esm/fp/setWeekYear/index.js
var setWeekYear_default = convertToFP(setWeekYear, 2);

// node_modules/date-fns/esm/fp/setWeekYearWithOptions/index.js
var setWeekYearWithOptions_default = convertToFP(setWeekYear, 3);

// node_modules/date-fns/esm/fp/setYear/index.js
var setYear_default = convertToFP(setYear, 2);

// node_modules/date-fns/esm/fp/startOfDay/index.js
var startOfDay_default = convertToFP(startOfDay, 1);

// node_modules/date-fns/esm/fp/startOfDecade/index.js
var startOfDecade_default = convertToFP(startOfDecade, 1);

// node_modules/date-fns/esm/fp/startOfHour/index.js
var startOfHour_default = convertToFP(startOfHour, 1);

// node_modules/date-fns/esm/fp/startOfISOWeek/index.js
var startOfISOWeek_default = convertToFP(startOfISOWeek, 1);

// node_modules/date-fns/esm/fp/startOfISOWeekYear/index.js
var startOfISOWeekYear_default = convertToFP(startOfISOWeekYear, 1);

// node_modules/date-fns/esm/fp/startOfMinute/index.js
var startOfMinute_default = convertToFP(startOfMinute, 1);

// node_modules/date-fns/esm/fp/startOfMonth/index.js
var startOfMonth_default = convertToFP(startOfMonth, 1);

// node_modules/date-fns/esm/fp/startOfQuarter/index.js
var startOfQuarter_default = convertToFP(startOfQuarter, 1);

// node_modules/date-fns/esm/fp/startOfSecond/index.js
var startOfSecond_default = convertToFP(startOfSecond, 1);

// node_modules/date-fns/esm/fp/startOfWeek/index.js
var startOfWeek_default = convertToFP(startOfWeek, 1);

// node_modules/date-fns/esm/fp/startOfWeekWithOptions/index.js
var startOfWeekWithOptions_default = convertToFP(startOfWeek, 2);

// node_modules/date-fns/esm/fp/startOfWeekYear/index.js
var startOfWeekYear_default = convertToFP(startOfWeekYear, 1);

// node_modules/date-fns/esm/fp/startOfWeekYearWithOptions/index.js
var startOfWeekYearWithOptions_default = convertToFP(startOfWeekYear, 2);

// node_modules/date-fns/esm/fp/startOfYear/index.js
var startOfYear_default = convertToFP(startOfYear, 1);

// node_modules/date-fns/esm/fp/sub/index.js
var sub_default = convertToFP(sub, 2);

// node_modules/date-fns/esm/fp/subBusinessDays/index.js
var subBusinessDays_default = convertToFP(subBusinessDays, 2);

// node_modules/date-fns/esm/fp/subDays/index.js
var subDays_default = convertToFP(subDays, 2);

// node_modules/date-fns/esm/fp/subHours/index.js
var subHours_default = convertToFP(subHours, 2);

// node_modules/date-fns/esm/fp/subISOWeekYears/index.js
var subISOWeekYears_default = convertToFP(subISOWeekYears, 2);

// node_modules/date-fns/esm/fp/subMilliseconds/index.js
var subMilliseconds_default = convertToFP(subMilliseconds, 2);

// node_modules/date-fns/esm/fp/subMinutes/index.js
var subMinutes_default = convertToFP(subMinutes, 2);

// node_modules/date-fns/esm/fp/subMonths/index.js
var subMonths_default = convertToFP(subMonths, 2);

// node_modules/date-fns/esm/fp/subQuarters/index.js
var subQuarters_default = convertToFP(subQuarters, 2);

// node_modules/date-fns/esm/fp/subSeconds/index.js
var subSeconds_default = convertToFP(subSeconds, 2);

// node_modules/date-fns/esm/fp/subWeeks/index.js
var subWeeks_default = convertToFP(subWeeks, 2);

// node_modules/date-fns/esm/fp/subYears/index.js
var subYears_default = convertToFP(subYears, 2);

// node_modules/date-fns/esm/fp/toDate/index.js
var toDate_default = convertToFP(toDate, 1);

// node_modules/date-fns/esm/fp/weeksToDays/index.js
var weeksToDays_default = convertToFP(weeksToDays, 1);

// node_modules/date-fns/esm/fp/yearsToMonths/index.js
var yearsToMonths_default = convertToFP(yearsToMonths, 1);

// node_modules/date-fns/esm/fp/yearsToQuarters/index.js
var yearsToQuarters_default = convertToFP(yearsToQuarters, 1);

// node_modules/vue3-datepicker/dist/vue3-datepicker.esm.js
var script$5 = defineComponent({
  emits: {
    elementClick: (value) => isValid(value),
    left: () => true,
    right: () => true,
    heading: () => true
  },
  props: {
    headingClickable: {
      type: Boolean,
      default: false
    },
    leftDisabled: {
      type: Boolean,
      default: false
    },
    rightDisabled: {
      type: Boolean,
      default: false
    },
    columnCount: {
      type: Number,
      default: 7
    },
    items: {
      type: Array,
      default: () => []
    }
  }
});
var _withId$1 = withScopeId("data-v-2e128338");
pushScopeId("data-v-2e128338");
var _hoisted_1$2 = { class: "v3dp__heading" };
var _hoisted_2$2 = createVNode("svg", {
  class: "v3dp__heading__icon",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 6 8"
}, [
  createVNode("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, [
    createVNode("path", {
      stroke: "none",
      d: "M-9 16V-8h24v24z"
    }),
    createVNode("path", {
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      d: "M5 0L1 4l4 4"
    })
  ])
], -1);
var _hoisted_3 = createVNode("svg", {
  class: "v3dp__heading__icon",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 6 8"
}, [
  createVNode("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, [
    createVNode("path", {
      stroke: "none",
      d: "M15-8v24H-9V-8z"
    }),
    createVNode("path", {
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      d: "M1 8l4-4-4-4"
    })
  ])
], -1);
var _hoisted_4 = { class: "v3dp__body" };
var _hoisted_5 = { class: "v3dp__subheading" };
var _hoisted_6 = createVNode("hr", { class: "v3dp__divider" }, null, -1);
var _hoisted_7 = { class: "v3dp__elements" };
popScopeId();
var render$5 = _withId$1((_ctx, _cache, $props, $setup, $data, $options) => {
  return openBlock(), createBlock("div", {
    class: "v3dp__popout",
    style: { "--popout-column-definition": `repeat(${_ctx.columnCount}, 1fr)` },
    onMousedown: _cache[4] || (_cache[4] = withModifiers(() => {
    }, ["prevent"]))
  }, [
    createVNode("div", _hoisted_1$2, [
      createVNode("button", {
        class: "v3dp__heading__button",
        disabled: _ctx.leftDisabled,
        onClick: _cache[1] || (_cache[1] = withModifiers(($event) => _ctx.$emit("left"), ["stop", "prevent"]))
      }, [
        renderSlot(_ctx.$slots, "arrow-left", {}, () => [
          _hoisted_2$2
        ])
      ], 8, ["disabled"]),
      (openBlock(), createBlock(resolveDynamicComponent(_ctx.headingClickable ? "button" : "span"), {
        class: "v3dp__heading__center",
        onClick: _cache[2] || (_cache[2] = withModifiers(($event) => _ctx.$emit("heading"), ["stop", "prevent"]))
      }, {
        default: _withId$1(() => [
          renderSlot(_ctx.$slots, "heading")
        ]),
        _: 3
      })),
      createVNode("button", {
        class: "v3dp__heading__button",
        disabled: _ctx.rightDisabled,
        onClick: _cache[3] || (_cache[3] = withModifiers(($event) => _ctx.$emit("right"), ["stop", "prevent"]))
      }, [
        renderSlot(_ctx.$slots, "arrow-right", {}, () => [
          _hoisted_3
        ])
      ], 8, ["disabled"])
    ]),
    createVNode("div", _hoisted_4, [
      "subheading" in _ctx.$slots ? (openBlock(), createBlock(Fragment, { key: 0 }, [
        createVNode("div", _hoisted_5, [
          renderSlot(_ctx.$slots, "subheading")
        ]),
        _hoisted_6
      ], 64)) : createCommentVNode("v-if", true),
      createVNode("div", _hoisted_7, [
        renderSlot(_ctx.$slots, "body", {}, () => [
          (openBlock(true), createBlock(Fragment, null, renderList(_ctx.items, (item) => {
            return openBlock(), createBlock("button", {
              key: item.key,
              disabled: item.disabled,
              class: { selected: item.selected },
              onClick: withModifiers(($event) => _ctx.$emit("elementClick", item.value), ["stop", "prevent"])
            }, [
              createVNode("span", null, toDisplayString(item.display), 1)
            ], 10, ["disabled", "onClick"]);
          }), 128))
        ])
      ])
    ])
  ], 36);
});
function styleInject(css, ref2) {
  if (ref2 === void 0)
    ref2 = {};
  var insertAt = ref2.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z$2 = "\n.v3dp__popout[data-v-2e128338] {\n  z-index: 10;\n  position: absolute;\n  /* bottom: 0; */\n  text-align: center;\n  width: 17.5em;\n  background-color: var(--popout-bg-color);\n  box-shadow: var(--box-shadow);\n  border-radius: var(--border-radius);\n  padding: 8px 0 1em;\n  color: var(--text-color);\n}\n.v3dp__popout *[data-v-2e128338] {\n  color: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n}\n.v3dp__popout[data-v-2e128338] button {\n  background: none;\n  border: none;\n  outline: none;\n}\n.v3dp__popout[data-v-2e128338] button:not(:disabled) {\n  cursor: pointer;\n}\n.v3dp__heading[data-v-2e128338] {\n  width: 100%;\n  display: flex;\n  height: var(--heading-size);\n  line-height: var(--heading-size);\n  font-weight: var(--heading-weight);\n}\n.v3dp__heading__button[data-v-2e128338] {\n  background: none;\n  border: none;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--heading-size);\n}\nbutton.v3dp__heading__center[data-v-2e128338]:hover,\n.v3dp__heading__button[data-v-2e128338]:not(:disabled):hover {\n  background-color: var(--heading-hover-color);\n}\n.v3dp__heading__center[data-v-2e128338] {\n  flex: 1;\n}\n.v3dp__heading__icon[data-v-2e128338] {\n  height: 12px;\n  stroke: var(--arrow-color);\n}\n.v3dp__heading__button:disabled .v3dp__heading__icon[data-v-2e128338] {\n  stroke: var(--elem-disabled-color);\n}\n.v3dp__subheading[data-v-2e128338],\n.v3dp__elements[data-v-2e128338] {\n  display: grid;\n  grid-template-columns: var(--popout-column-definition);\n  font-size: var(--elem-font-size);\n}\n.v3dp__subheading[data-v-2e128338] {\n  margin-top: 1em;\n}\n.v3dp__divider[data-v-2e128338] {\n  border: 1px solid var(--divider-color);\n  border-radius: 3px;\n}\n.v3dp__elements[data-v-2e128338] button:disabled {\n  color: var(--elem-disabled-color);\n}\n.v3dp__elements[data-v-2e128338] button{\n  padding: 0.3em 0.6em;\n}\n.v3dp__elements[data-v-2e128338] button span {\n  display: block;\n  line-height: 1.9em;\n  height: 1.8em;\n  border-radius: var(--elem-border-radius);\n}\n.v3dp__elements[data-v-2e128338] button:not(:disabled):hover span {\n  background-color: var(--elem-hover-bg-color);\n  color: var(--elem-hover-color);\n}\n.v3dp__elements[data-v-2e128338] button.selected span {\n  background-color: var(--elem-selected-bg-color);\n  color: var(--elem-selected-color);\n}\n";
styleInject(css_248z$2);
script$5.render = render$5;
script$5.__scopeId = "data-v-2e128338";
script$5.__file = "src/datepicker/PickerPopup.vue";
var script$4 = defineComponent({
  components: {
    PickerPopup: script$5
  },
  emits: {
    "update:pageDate": (date) => isValid(date),
    select: (date) => isValid(date)
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    }
  },
  setup(props, { emit }) {
    const from = computed(() => startOfDecade(props.pageDate));
    const to = computed(() => endOfDecade(props.pageDate));
    const isEnabled = (target, lower, upper) => {
      if (!lower && !upper)
        return true;
      if (lower && getYear(target) < getYear(lower))
        return false;
      if (upper && getYear(target) > getYear(upper))
        return false;
      return true;
    };
    const years = computed(() => eachYearOfInterval({
      start: from.value,
      end: to.value
    }).map((value) => ({
      value,
      key: String(getYear(value)),
      display: getYear(value),
      selected: props.selected && getYear(value) === getYear(props.selected),
      disabled: !isEnabled(value, props.lowerLimit, props.upperLimit)
    })));
    const heading = computed(() => {
      const start = getYear(from.value);
      const end = getYear(to.value);
      return `${start} - ${end}`;
    });
    const leftDisabled = computed(() => props.lowerLimit && (getDecade(props.lowerLimit) === getDecade(props.pageDate) || isBefore(props.pageDate, props.lowerLimit)));
    const rightDisabled = computed(() => props.upperLimit && (getDecade(props.upperLimit) === getDecade(props.pageDate) || isAfter(props.pageDate, props.upperLimit)));
    const previousPage = () => emit("update:pageDate", subYears(props.pageDate, 10));
    const nextPage = () => emit("update:pageDate", addYears(props.pageDate, 10));
    return {
      years,
      heading,
      leftDisabled,
      rightDisabled,
      previousPage,
      nextPage
    };
  }
});
function render$4(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_picker_popup = resolveComponent("picker-popup");
  return openBlock(), createBlock(_component_picker_popup, {
    columnCount: 3,
    leftDisabled: _ctx.leftDisabled,
    rightDisabled: _ctx.rightDisabled,
    items: _ctx.years,
    onLeft: _ctx.previousPage,
    onRight: _ctx.nextPage,
    onElementClick: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("select", $event))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(_ctx.heading), 1)
    ]),
    _: 1
  }, 8, ["leftDisabled", "rightDisabled", "items", "onLeft", "onRight"]);
}
script$4.render = render$4;
script$4.__file = "src/datepicker/YearPicker.vue";
var script$3 = defineComponent({
  components: {
    PickerPopup: script$5
  },
  emits: {
    "update:pageDate": (date) => isValid(date),
    select: (date) => isValid(date),
    back: () => true
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    format: {
      type: String,
      required: false,
      default: "LLL"
    },
    locale: {
      type: Object,
      required: false
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    }
  },
  setup(props, { emit }) {
    const from = computed(() => startOfYear(props.pageDate));
    const to = computed(() => endOfYear(props.pageDate));
    const format2 = computed(() => formatWithOptions_default({
      locale: props.locale
    })(props.format));
    const isEnabled = (target, lower, upper) => {
      if (!lower && !upper)
        return true;
      if (lower && isBefore(target, startOfMonth(lower)))
        return false;
      if (upper && isAfter(target, endOfMonth(upper)))
        return false;
      return true;
    };
    const months = computed(() => eachMonthOfInterval({
      start: from.value,
      end: to.value
    }).map((value) => ({
      value,
      display: format2.value(value),
      key: format2.value(value),
      selected: props.selected && isSameMonth(props.selected, value),
      disabled: !isEnabled(value, props.lowerLimit, props.upperLimit)
    })));
    const heading = computed(() => getYear(from.value));
    const leftDisabled = computed(() => props.lowerLimit && (isSameYear(props.lowerLimit, props.pageDate) || isBefore(props.pageDate, props.lowerLimit)));
    const rightDisabled = computed(() => props.upperLimit && (isSameYear(props.upperLimit, props.pageDate) || isAfter(props.pageDate, props.upperLimit)));
    const previousPage = () => emit("update:pageDate", subYears(props.pageDate, 1));
    const nextPage = () => emit("update:pageDate", addYears(props.pageDate, 1));
    return {
      months,
      heading,
      leftDisabled,
      rightDisabled,
      previousPage,
      nextPage
    };
  }
});
function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_picker_popup = resolveComponent("picker-popup");
  return openBlock(), createBlock(_component_picker_popup, {
    headingClickable: "",
    columnCount: 3,
    items: _ctx.months,
    leftDisabled: _ctx.leftDisabled,
    rightDisabled: _ctx.rightDisabled,
    onLeft: _ctx.previousPage,
    onRight: _ctx.nextPage,
    onHeading: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("back")),
    onElementClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("select", $event))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(_ctx.heading), 1)
    ]),
    _: 1
  }, 8, ["items", "leftDisabled", "rightDisabled", "onLeft", "onRight"]);
}
script$3.render = render$3;
script$3.__file = "src/datepicker/MonthPicker.vue";
var script$2 = defineComponent({
  components: {
    PickerPopup: script$5
  },
  emits: {
    "update:pageDate": (date) => isValid(date),
    select: (date) => isValid(date),
    back: () => true
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    format: {
      type: String,
      required: false,
      default: "dd"
    },
    headingFormat: {
      type: String,
      required: false,
      default: "LLLL yyyy"
    },
    weekdayFormat: {
      type: String,
      required: false,
      default: "EE"
    },
    locale: {
      type: Object,
      required: false
    },
    weekStartsOn: {
      type: Number,
      required: false,
      default: 1,
      validator: (i) => typeof i === "number" && Number.isInteger(i) && i >= 0 && i <= 6
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    },
    disabledDates: {
      type: Object,
      required: false
    }
  },
  setup(props, { emit }) {
    const format2 = computed(() => formatWithOptions_default({
      locale: props.locale,
      weekStartsOn: props.weekStartsOn
    }));
    const monthStart = computed(() => startOfMonth(props.pageDate));
    const monthEnd = computed(() => endOfMonth(props.pageDate));
    const currentMonth = computed(() => ({
      start: monthStart.value,
      end: monthEnd.value
    }));
    const displayedInterval = computed(() => ({
      start: startOfWeek(monthStart.value, {
        weekStartsOn: props.weekStartsOn
      }),
      end: endOfWeek(monthEnd.value, {
        weekStartsOn: props.weekStartsOn
      })
    }));
    const weekDays = computed(() => {
      const initial = props.weekStartsOn;
      const dayFormat = format2.value(props.weekdayFormat);
      return Array.from(Array(7)).map((_, i) => (initial + i) % 7).map((v) => setDay(new Date(), v, {
        weekStartsOn: props.weekStartsOn
      })).map(dayFormat);
    });
    const isEnabled = (target, lower, upper, disabledDates) => {
      var _a, _b;
      if ((_a = disabledDates === null || disabledDates === void 0 ? void 0 : disabledDates.dates) === null || _a === void 0 ? void 0 : _a.some((date) => isSameDay(target, date)))
        return false;
      if ((_b = disabledDates === null || disabledDates === void 0 ? void 0 : disabledDates.predicate) === null || _b === void 0 ? void 0 : _b.call(disabledDates, target))
        return false;
      if (!lower && !upper)
        return true;
      if (lower && isBefore(target, startOfDay(lower)))
        return false;
      if (upper && isAfter(target, endOfDay(upper)))
        return false;
      return true;
    };
    const days = computed(() => {
      const dayFormat = format2.value(props.format);
      return eachDayOfInterval(displayedInterval.value).map((value) => ({
        value,
        display: dayFormat(value),
        selected: props.selected && isSameDay(props.selected, value),
        disabled: !isWithinInterval(value, currentMonth.value) || !isEnabled(value, props.lowerLimit, props.upperLimit, props.disabledDates),
        key: format2.value("yyyy-MM-dd", value)
      }));
    });
    const heading = computed(() => format2.value(props.headingFormat)(props.pageDate));
    const leftDisabled = computed(() => props.lowerLimit && (isSameMonth(props.lowerLimit, props.pageDate) || isBefore(props.pageDate, props.lowerLimit)));
    const rightDisabled = computed(() => props.upperLimit && (isSameMonth(props.upperLimit, props.pageDate) || isAfter(props.pageDate, props.upperLimit)));
    const previousPage = () => emit("update:pageDate", subMonths(props.pageDate, 1));
    const nextPage = () => emit("update:pageDate", addMonths(props.pageDate, 1));
    return {
      weekDays,
      days,
      heading,
      leftDisabled,
      rightDisabled,
      previousPage,
      nextPage
    };
  }
});
function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_picker_popup = resolveComponent("picker-popup");
  return openBlock(), createBlock(_component_picker_popup, {
    headingClickable: "",
    leftDisabled: _ctx.leftDisabled,
    rightDisabled: _ctx.rightDisabled,
    items: _ctx.days,
    onLeft: _ctx.previousPage,
    onRight: _ctx.nextPage,
    onHeading: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("back")),
    onElementClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("select", $event))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(_ctx.heading), 1)
    ]),
    subheading: withCtx(() => [
      (openBlock(true), createBlock(Fragment, null, renderList(_ctx.weekDays, (day) => {
        return openBlock(), createBlock("span", { key: day }, toDisplayString(day), 1);
      }), 128))
    ]),
    _: 1
  }, 8, ["leftDisabled", "rightDisabled", "items", "onLeft", "onRight"]);
}
script$2.render = render$2;
script$2.__file = "src/datepicker/DayPicker.vue";
function scrollParentToChild(parent, child) {
  const parentRect = parent.getBoundingClientRect();
  const parentViewableArea = {
    height: parent.clientHeight,
    width: parent.clientWidth
  };
  const childRect = child.getBoundingClientRect();
  const isViewable = childRect.top >= parentRect.top && childRect.bottom <= parentRect.top + parentViewableArea.height;
  if (!isViewable) {
    const scrollTop = childRect.top - parentRect.top;
    const scrollBot = childRect.bottom - parentRect.bottom;
    if (Math.abs(scrollTop) < Math.abs(scrollBot)) {
      parent.scrollTop += scrollTop;
    } else {
      parent.scrollTop += scrollBot;
    }
  }
}
var script$1 = defineComponent({
  components: {
    PickerPopup: script$5
  },
  emits: {
    select: (date) => isValid(date),
    back: () => true
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    visible: {
      type: Boolean,
      required: true
    },
    disabledTime: {
      type: Object,
      required: false
    }
  },
  setup(props, { emit }) {
    const hoursListRef = ref(null);
    const minutesListRef = ref(null);
    const currentDate = computed(() => {
      var _a;
      return (_a = props.pageDate) !== null && _a !== void 0 ? _a : props.selected;
    });
    const hours = ref(currentDate.value.getHours());
    const minutes = ref(currentDate.value.getMinutes());
    watch(() => props.selected, (value) => {
      let newHours = 0;
      let newMinutes = 0;
      if (value) {
        newHours = value.getHours();
        newMinutes = value.getMinutes();
      }
      hours.value = newHours;
      minutes.value = newMinutes;
    });
    const hoursList = computed(() => [...Array(24).keys()].map((value) => ({
      value,
      date: set(new Date(currentDate.value.getTime()), { hours: value, minutes: minutes.value, seconds: 0 }),
      selected: hours.value === value,
      ref: ref(null)
    })));
    const minutesList = computed(() => [...Array(60).keys()].map((value) => ({
      value,
      date: set(new Date(currentDate.value.getTime()), { hours: hours.value, minutes: value, seconds: 0 }),
      selected: minutes.value === value,
      ref: ref(null)
    })));
    const selectMinutes = (item) => {
      minutes.value = item.value;
      emit("select", item.date);
    };
    const scroll = () => {
      const currentHour = hoursList.value.find((item) => {
        var _a;
        return (_a = item.ref.value) === null || _a === void 0 ? void 0 : _a.classList.contains("selected");
      });
      const currentMinute = minutesList.value.find((item) => {
        var _a;
        return (_a = item.ref.value) === null || _a === void 0 ? void 0 : _a.classList.contains("selected");
      });
      if (currentHour && currentMinute) {
        scrollParentToChild(hoursListRef.value, currentHour.ref.value);
        scrollParentToChild(minutesListRef.value, currentMinute.ref.value);
      }
    };
    watch(() => props.visible, (visible) => {
      if (visible) {
        nextTick(scroll);
      }
    });
    const isEnabled = (target) => {
      var _a, _b, _c, _d;
      if ((_b = (_a = props.disabledTime) === null || _a === void 0 ? void 0 : _a.dates) === null || _b === void 0 ? void 0 : _b.some((date) => isSameHour(target, date) && isSameMinute(target, date))) {
        return false;
      }
      if ((_d = (_c = props.disabledTime) === null || _c === void 0 ? void 0 : _c.predicate) === null || _d === void 0 ? void 0 : _d.call(_c, target))
        return false;
      return true;
    };
    const padStartZero = (item) => `0${item}`.substr(-2);
    return {
      hoursListRef,
      minutesListRef,
      hours,
      minutes,
      hoursList,
      minutesList,
      padStartZero,
      selectMinutes,
      isEnabled,
      scroll
    };
  }
});
var _withId = withScopeId("data-v-e1b37236");
pushScopeId("data-v-e1b37236");
var _hoisted_1$1 = {
  ref: "hoursListRef",
  class: "v3dp__column"
};
var _hoisted_2$1 = {
  ref: "minutesListRef",
  class: "v3dp__column"
};
popScopeId();
var render$1 = _withId((_ctx, _cache, $props, $setup, $data, $options) => {
  const _component_picker_popup = resolveComponent("picker-popup");
  return openBlock(), createBlock(_component_picker_popup, {
    headingClickable: "",
    columnCount: 2,
    leftDisabled: true,
    rightDisabled: true,
    onHeading: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("back"))
  }, {
    heading: _withId(() => [
      createTextVNode(toDisplayString(_ctx.padStartZero(_ctx.hours)) + ":" + toDisplayString(_ctx.padStartZero(_ctx.minutes)), 1)
    ]),
    body: _withId(() => [
      createVNode("div", _hoisted_1$1, [
        (openBlock(true), createBlock(Fragment, null, renderList(_ctx.hoursList, (item) => {
          return openBlock(), createBlock("button", {
            key: item.value,
            ref: item.ref,
            class: { selected: item.selected },
            disabled: !_ctx.isEnabled(item.date),
            onClick: withModifiers(($event) => _ctx.hours = item.value, ["stop", "prevent"])
          }, [
            createVNode("span", null, toDisplayString(_ctx.padStartZero(item.value)), 1)
          ], 10, ["disabled", "onClick"]);
        }), 128))
      ], 512),
      createVNode("div", _hoisted_2$1, [
        (openBlock(true), createBlock(Fragment, null, renderList(_ctx.minutesList, (item) => {
          return openBlock(), createBlock("button", {
            key: item.value,
            ref: item.ref,
            class: { selected: item.selected },
            disabled: !_ctx.isEnabled(item.date),
            onClick: withModifiers(($event) => _ctx.selectMinutes(item), ["stop", "prevent"])
          }, [
            createVNode("span", null, toDisplayString(_ctx.padStartZero(item.value)), 1)
          ], 10, ["disabled", "onClick"]);
        }), 128))
      ], 512)
    ]),
    _: 1
  });
});
var css_248z$1 = "\n.v3dp__column[data-v-e1b37236] {\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  height: 190px;\n}\n";
styleInject(css_248z$1);
script$1.render = render$1;
script$1.__scopeId = "data-v-e1b37236";
script$1.__file = "src/datepicker/Timepicker.vue";
var TIME_RESOLUTIONS = ["time", "day", "month", "year"];
var script = defineComponent({
  components: {
    YearPicker: script$4,
    MonthPicker: script$3,
    DayPicker: script$2,
    TimePicker: script$1
  },
  inheritAttrs: false,
  props: {
    placeholder: {
      type: String,
      default: ""
    },
    modelValue: {
      type: Date,
      required: false
    },
    disabledDates: {
      type: Object,
      required: false
    },
    disabledTime: {
      type: Object,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    startingView: {
      type: String,
      required: false,
      default: "day",
      validate: (v) => typeof v === "string" && TIME_RESOLUTIONS.includes(v)
    },
    monthHeadingFormat: {
      type: String,
      required: false,
      default: "LLLL yyyy"
    },
    monthListFormat: {
      type: String,
      required: false,
      default: "LLL"
    },
    weekdayFormat: {
      type: String,
      required: false,
      default: "EE"
    },
    inputFormat: {
      type: String,
      required: false,
      default: "yyyy-MM-dd"
    },
    locale: {
      type: Object,
      required: false
    },
    weekStartsOn: {
      type: Number,
      required: false,
      default: 1,
      validator: (value) => [0, 1, 2, 3, 4, 5, 6].includes(value)
    },
    disabled: {
      type: Boolean,
      required: false,
      default: false
    },
    clearable: {
      type: Boolean,
      required: false,
      default: false
    },
    typeable: {
      type: Boolean,
      required: false,
      default: false
    },
    minimumView: {
      type: String,
      required: false,
      default: "day",
      validate: (v) => typeof v === "string" && TIME_RESOLUTIONS.includes(v)
    }
  },
  emits: {
    "update:modelValue": (value) => value === null || value === void 0 || isValid(value)
  },
  setup(props, { emit, attrs }) {
    const viewShown = ref("none");
    const pageDate = ref(new Date());
    const inputRef = ref(null);
    const input = ref("");
    watchEffect(() => {
      const parsed = parse(input.value, props.inputFormat, new Date());
      if (isValid(parsed)) {
        pageDate.value = parsed;
      }
    });
    watchEffect(() => input.value = props.modelValue && isValid(props.modelValue) ? format(props.modelValue, props.inputFormat, {
      locale: props.locale
    }) : "");
    const renderView = (view = "none") => {
      if (!props.disabled)
        viewShown.value = view;
    };
    watchEffect(() => {
      if (props.disabled)
        viewShown.value = "none";
    });
    const selectYear = (date) => {
      pageDate.value = date;
      if (props.minimumView === "year") {
        viewShown.value = "none";
        emit("update:modelValue", date);
      } else {
        viewShown.value = "month";
      }
    };
    const selectMonth = (date) => {
      pageDate.value = date;
      if (props.minimumView === "month") {
        viewShown.value = "none";
        emit("update:modelValue", date);
      } else {
        viewShown.value = "day";
      }
    };
    const selectDay = (date) => {
      pageDate.value = date;
      if (props.minimumView === "day") {
        viewShown.value = "none";
        emit("update:modelValue", date);
      } else {
        viewShown.value = "time";
      }
    };
    const selectTime = (date) => {
      emit("update:modelValue", date);
      viewShown.value = "none";
    };
    const clearModelValue = () => {
      if (props.clearable) {
        emit("update:modelValue", null);
      }
    };
    const keyUp = (event) => {
      const code = event.keyCode ? event.keyCode : event.which;
      const closeButton = [
        27,
        13
      ].includes(code);
      if (closeButton) {
        inputRef.value.blur();
      }
      if (props.typeable) {
        const parsedDate = parse(inputRef.value.value, props.inputFormat, new Date(), { locale: props.locale });
        if (isValid(parsedDate) && input.value.length === props.inputFormat.length) {
          input.value = inputRef.value.value;
          emit("update:modelValue", parsedDate);
        }
      }
    };
    const initialView = computed(() => {
      const startingViewOrder = TIME_RESOLUTIONS.indexOf(props.startingView);
      const minimumViewOrder = TIME_RESOLUTIONS.indexOf(props.minimumView);
      return startingViewOrder < minimumViewOrder ? props.minimumView : props.startingView;
    });
    const variables = (object) => Object.fromEntries(Object.entries(object !== null && object !== void 0 ? object : {}).filter(([key, _]) => key.startsWith("--")));
    return {
      input,
      inputRef,
      pageDate,
      renderView,
      selectYear,
      selectMonth,
      selectDay,
      selectTime,
      keyUp,
      viewShown,
      clearModelValue,
      initialView,
      log: (e) => console.log(e),
      variables
    };
  }
});
var _hoisted_1 = { class: "v3dp__input_wrapper" };
var _hoisted_2 = { class: "v3dp__clearable" };
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_year_picker = resolveComponent("year-picker");
  const _component_month_picker = resolveComponent("month-picker");
  const _component_day_picker = resolveComponent("day-picker");
  const _component_time_picker = resolveComponent("time-picker");
  return openBlock(), createBlock("div", {
    class: "v3dp__datepicker",
    style: _ctx.variables(_ctx.$attrs.style)
  }, [
    createVNode("div", _hoisted_1, [
      withDirectives(createVNode("input", mergeProps({
        type: "text",
        ref: "inputRef",
        readonly: !_ctx.typeable,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.input = $event)
      }, _ctx.$attrs, {
        placeholder: _ctx.placeholder,
        disabled: _ctx.disabled,
        tabindex: _ctx.disabled ? -1 : 0,
        onKeyup: _cache[2] || (_cache[2] = (...args) => _ctx.keyUp && _ctx.keyUp(...args)),
        onBlur: _cache[3] || (_cache[3] = ($event) => _ctx.renderView()),
        onFocus: _cache[4] || (_cache[4] = ($event) => _ctx.renderView(_ctx.initialView)),
        onClick: _cache[5] || (_cache[5] = ($event) => _ctx.renderView(_ctx.initialView))
      }), null, 16, ["readonly", "placeholder", "disabled", "tabindex"]), [
        [vModelText, _ctx.input]
      ]),
      withDirectives(createVNode("div", _hoisted_2, [
        renderSlot(_ctx.$slots, "clear", { onClear: _ctx.clearModelValue }, () => [
          createVNode("i", {
            onClick: _cache[6] || (_cache[6] = ($event) => _ctx.clearModelValue())
          }, "x")
        ])
      ], 512), [
        [vShow, _ctx.clearable && _ctx.modelValue]
      ])
    ]),
    withDirectives(createVNode(_component_year_picker, {
      pageDate: _ctx.pageDate,
      "onUpdate:pageDate": _cache[7] || (_cache[7] = ($event) => _ctx.pageDate = $event),
      selected: _ctx.modelValue,
      lowerLimit: _ctx.lowerLimit,
      upperLimit: _ctx.upperLimit,
      onSelect: _ctx.selectYear
    }, null, 8, ["pageDate", "selected", "lowerLimit", "upperLimit", "onSelect"]), [
      [vShow, _ctx.viewShown === "year"]
    ]),
    withDirectives(createVNode(_component_month_picker, {
      pageDate: _ctx.pageDate,
      "onUpdate:pageDate": _cache[8] || (_cache[8] = ($event) => _ctx.pageDate = $event),
      selected: _ctx.modelValue,
      onSelect: _ctx.selectMonth,
      lowerLimit: _ctx.lowerLimit,
      upperLimit: _ctx.upperLimit,
      format: _ctx.monthListFormat,
      headingFormat: _ctx.monthHeadingFormat,
      locale: _ctx.locale,
      onBack: _cache[9] || (_cache[9] = ($event) => _ctx.viewShown = "year")
    }, null, 8, ["pageDate", "selected", "onSelect", "lowerLimit", "upperLimit", "format", "headingFormat", "locale"]), [
      [vShow, _ctx.viewShown === "month"]
    ]),
    withDirectives(createVNode(_component_day_picker, {
      pageDate: _ctx.pageDate,
      "onUpdate:pageDate": _cache[10] || (_cache[10] = ($event) => _ctx.pageDate = $event),
      selected: _ctx.modelValue,
      weekStartsOn: _ctx.weekStartsOn,
      lowerLimit: _ctx.lowerLimit,
      upperLimit: _ctx.upperLimit,
      disabledDates: _ctx.disabledDates,
      locale: _ctx.locale,
      weekdayFormat: _ctx.weekdayFormat,
      onSelect: _ctx.selectDay,
      onBack: _cache[11] || (_cache[11] = ($event) => _ctx.viewShown = "month")
    }, null, 8, ["pageDate", "selected", "weekStartsOn", "lowerLimit", "upperLimit", "disabledDates", "locale", "weekdayFormat", "onSelect"]), [
      [vShow, _ctx.viewShown === "day"]
    ]),
    withDirectives(createVNode(_component_time_picker, {
      pageDate: _ctx.pageDate,
      "onUpdate:pageDate": _cache[12] || (_cache[12] = ($event) => _ctx.pageDate = $event),
      visible: _ctx.viewShown === "time",
      selected: _ctx.modelValue,
      disabledTime: _ctx.disabledTime,
      onSelect: _ctx.selectTime,
      onBack: _cache[13] || (_cache[13] = () => _ctx.startingView === "time" && _ctx.minimumView === "time" ? null : _ctx.viewShown = "day")
    }, null, 8, ["pageDate", "visible", "selected", "disabledTime", "onSelect"]), [
      [vShow, _ctx.viewShown === "time"]
    ])
  ], 4);
}
var css_248z = "\n.v3dp__datepicker {\n  --popout-bg-color: var(--vdp-bg-color, #fff);\n  --box-shadow: var(\n    --vdp-box-shadow,\n    0 4px 10px 0 rgba(128, 144, 160, 0.1),\n    0 0 1px 0 rgba(128, 144, 160, 0.81)\n  );\n  --text-color: var(--vdp-text-color, #000000);\n  --border-radius: var(--vdp-border-radius, 3px);\n  --heading-size: var(--vdp-heading-size, 2.5em); /* 40px for 16px font */\n  --heading-weight: var(--vdp-heading-weight, bold);\n  --heading-hover-color: var(--vdp-heading-hover-color, #eeeeee);\n  --arrow-color: var(--vdp-arrow-color, currentColor);\n\n  --elem-color: var(--vdp-elem-color, currentColor);\n  --elem-disabled-color: var(--vdp-disabled-color, #d5d9e0);\n  --elem-hover-color: var(--vdp-hover-color, #fff);\n  --elem-hover-bg-color: var(--vdp-hover-bg-color, #0baf74);\n  --elem-selected-color: var(--vdp-selected-color, #fff);\n  --elem-selected-bg-color: var(--vdp-selected-bg-color, #0baf74);\n\n  --elem-font-size: var(--vdp-elem-font-size, 0.8em);\n  --elem-border-radius: var(--vdp-elem-border-radius, 3px);\n\n  --divider-color: var(--vdp-divider-color, var(--elem-disabled-color));\n\n  position: relative;\n}\n.v3dp__clearable {\n  display: inline;\n  position: relative;\n  left: -15px;\n  cursor: pointer;\n}\n";
styleInject(css_248z);
script.render = render;
script.__file = "src/datepicker/Datepicker.vue";
var vue3_datepicker_esm_default = script;

// dep:vue3-datepicker
var vue3_datepicker_default = vue3_datepicker_esm_default;
export {
  vue3_datepicker_default as default
};
//# sourceMappingURL=vue3-datepicker.js.map
