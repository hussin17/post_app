import "./chunk-BYTJ6LW2.js";
import {
  computed,
  createBlock,
  createCommentVNode,
  createVNode,
  openBlock,
  renderSlot,
  toRefs,
  vShow,
  withDirectives,
  withKeys
} from "./chunk-VBJ4LH5I.js";
import "./chunk-OROXOI2D.js";

// node_modules/@vueform/toggle/dist/toggle.js
function o(e, l) {
  var a = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    l && (n = n.filter(function(l2) {
      return Object.getOwnPropertyDescriptor(e, l2).enumerable;
    })), a.push.apply(a, n);
  }
  return a;
}
function f(e, l, a) {
  return l in e ? Object.defineProperty(e, l, { value: a, enumerable: true, configurable: true, writable: true }) : e[l] = a, e;
}
function s(a, n, t) {
  var u = toRefs(a), r = u.disabled, d = t.checked, i = computed(function() {
    return function(e) {
      for (var l = 1; l < arguments.length; l++) {
        var a2 = null != arguments[l] ? arguments[l] : {};
        l % 2 ? o(Object(a2), true).forEach(function(l2) {
          f(e, l2, a2[l2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a2)) : o(Object(a2)).forEach(function(l2) {
          Object.defineProperty(e, l2, Object.getOwnPropertyDescriptor(a2, l2));
        });
      }
      return e;
    }({ container: "toggle-container", toggle: "toggle", toggleOn: "toggle-on", toggleOff: "toggle-off", toggleOnDisabled: "toggle-on-disabled", toggleOffDisabled: "toggle-off-disabled", handle: "toggle-handle", handleOn: "toggle-handle-on", handleOff: "toggle-handle-off", handleOnDisabled: "toggle-handle-on-disabled", handleOffDisabled: "toggle-handle-off-disabled", label: "toggle-label" }, u.classes.value);
  });
  return { classList: computed(function() {
    return { container: i.value.container, toggle: [i.value.toggle, r.value ? d.value ? i.value.toggleOnDisabled : i.value.toggleOffDisabled : d.value ? i.value.toggleOn : i.value.toggleOff], handle: [i.value.handle, r.value ? d.value ? i.value.handleOnDisabled : i.value.handleOffDisabled : d.value ? i.value.handleOn : i.value.handleOff], label: i.value.label };
  }) };
}
var b = { name: "Toggle", emits: ["input", "update:modelValue", "change"], props: { ...{ value: { validator: function(e) {
  return (e2) => -1 !== ["number", "string", "boolean"].indexOf(typeof e2) || null == e2;
}, required: false }, modelValue: { validator: function(e) {
  return (e2) => -1 !== ["number", "string", "boolean"].indexOf(typeof e2) || null == e2;
}, required: false } }, id: { type: [String, Number], required: false, default: "toggle" }, name: { type: [String, Number], required: false, default: "toggle" }, disabled: { type: Boolean, required: false, default: false }, required: { type: Boolean, required: false, default: false }, falseValue: { type: [String, Number, Boolean], required: false, default: false }, trueValue: { type: [String, Number, Boolean], required: false, default: true }, onLabel: { type: [String, Object], required: false, default: "" }, offLabel: { type: [String, Object], required: false, default: "" }, classes: { type: Object, required: false, default: () => ({}) }, labelledby: { type: String, required: false }, describedby: { type: String, required: false } }, setup(a, n) {
  const t = function(a2, n2, t2) {
    var u2 = toRefs(a2), r2 = u2.value, d2 = u2.modelValue, i = u2.falseValue, c = u2.trueValue, o2 = u2.disabled, f2 = void 0 !== n2.expose ? d2 : r2, s2 = computed(function() {
      return f2.value === c.value;
    }), b2 = function(e) {
      n2.emit("input", e), n2.emit("update:modelValue", e), n2.emit("change", e);
    }, g = function() {
      b2(c.value);
    }, v = function() {
      b2(i.value);
    };
    return -1 !== [null, void 0, false, 0, "0", "off"].indexOf(f2.value) && -1 === [i.value, c.value].indexOf(f2.value) && v(), -1 !== [true, 1, "1", "on"].indexOf(f2.value) && -1 === [i.value, c.value].indexOf(f2.value) && g(), { externalValue: f2, checked: s2, update: b2, check: g, uncheck: v, handleInput: function(e) {
      b2(e.target.checked ? c.value : i.value);
    }, handleClick: function() {
      o2.value || (s2.value ? v() : g());
    } };
  }(a, n), u = function(a2, n2, t2) {
    var u2 = toRefs(a2), r2 = u2.trueValue, d2 = u2.falseValue, i = u2.onLabel, c = u2.offLabel, o2 = t2.checked, f2 = t2.update;
    return { label: computed(function() {
      var e = o2.value ? i.value : c.value;
      return e || (e = "&nbsp;"), e;
    }), toggle: function() {
      f2(o2.value ? d2.value : r2.value);
    }, on: function() {
      f2(r2.value);
    }, off: function() {
      f2(d2.value);
    } };
  }(a, 0, { checked: t.checked, update: t.update }), r = s(a, 0, { checked: t.checked }), d = function(l, a2, n2) {
    var t2 = toRefs(l).disabled, u2 = n2.check, r2 = n2.uncheck, d2 = n2.checked;
    return { handleSpace: function() {
      t2.value || (d2.value ? r2() : u2());
    } };
  }(a, 0, { check: t.check, uncheck: t.uncheck, checked: t.checked });
  return { ...t, ...r, ...u, ...d };
} };
b.render = function(e, l, o2, f2, s2, b2) {
  return openBlock(), createBlock("div", { class: e.classList.container, tabindex: o2.disabled ? void 0 : 0, "aria-checked": e.checked, "aria-describedby": o2.describedby, "aria-labelledby": o2.labelledby, role: "switch", onKeyup: l[2] || (l[2] = withKeys((...l2) => e.handleSpace && e.handleSpace(...l2), ["space"])) }, [withDirectives(createVNode("input", { type: "checkbox", id: o2.id, name: o2.name, value: o2.trueValue, checked: e.checked, disabled: o2.disabled }, null, 8, ["id", "name", "value", "checked", "disabled"]), [[vShow, false]]), createVNode("div", { class: e.classList.toggle, onClick: l[1] || (l[1] = (...l2) => e.handleClick && e.handleClick(...l2)) }, [createVNode("span", { class: e.classList.handle }, null, 2), renderSlot(e.$slots, "label", { checked: e.checked, classList: e.classList }, () => [createVNode("span", { class: e.classList.label, innerHTML: e.label }, null, 10, ["innerHTML"])]), o2.required ? (openBlock(), createBlock("input", { key: 0, type: "checkbox", style: { appearance: "none", height: "1px", margin: "0", padding: "0", fontSize: "0", background: "transparent", position: "absolute", width: "100%", bottom: "0", outline: "none" }, checked: e.checked, "aria-hidden": "true", tabindex: "-1", required: "" }, null, 8, ["checked"])) : createCommentVNode("v-if", true)], 2)], 42, ["tabindex", "aria-checked", "aria-describedby", "aria-labelledby"]);
}, b.__file = "src/Toggle.vue";
var toggle_default = b;

// dep:@vueform_toggle
var vueform_toggle_default = toggle_default;
export {
  vueform_toggle_default as default
};
//# sourceMappingURL=@vueform_toggle.js.map
